Explore Azure Storage for Non Relational Data:
    
    - Azure Blob Storage:
        - It is a service that enables you to store massive amounts of unstructured
        data as binary large objects or blobs in the cloud
        - Applications can read and write in blob storage by using the Azure blob
        storage API
        - In Azure, you store blobs in containers, which provides a convenient way
        of grouping related blobs togather
        - You control who can read and write blobs inside a container at the container
        level
        - Within a container, you can organize blobs in a hierarchy of virtual folders,
        similar to files in a file system on disk
        - The folders are purely virtual, and you can't perform folder-level operations 
        to control access or perform bulk operations
        - Azure Blob Supports three different types of blob:
            - Block Blobs:
                - The block is the smallest amount of data that can be read or written
                as an individual unit
                - It is handled as a set of blocks
                - Each block varies in size, upto 100 MB
                - A block blob can contain upto 50k blocks, or maximium size of 4.7 TB
                - Best used to store discrete, large, binary objects that change
                infrequently
            - Page Blobs:
                - It is organized as a collection of fixed size 512-byte pages
                - It is optimized to support random read and write operations
                - Fetch and store data for a single page if necessary
                - Can hold upto 8 TB of data
                - Azure uses page blobs to implement virtual disk storage for VMs
            - Append Blobs:
                - Optimized to support append operations
                - Only add blocks to the end of an append blob, updating or deleting
                existing blocks is not supported
                - Each block can vary in size upto 4 MB 
                - Maximum size of append blob is just over 195 GB
        
        - Tiers:
            - Hot:
                - The blob data is stored on high performance media
            - Cool
            - Archive:
                - Blobs are effectively stored in an offline state
                - Reading latency unlike in Hot and Cool which is milli-seconds,
                it can take hours for the data to become available
                - To retrieve a blob from the archive tier, you must change the access
                tier to hot or cool, which makes the blob to be rehydrated
        
        - Lifecycle Management Policies for blobs in a storage account:
            - Automatically move a blob from hot to cool and then to the Archive tier
            as it ages and is used less frequently
            - Policy is based on the number of days since modification
            - Policy can also be arranged to delete outdated blobs

    - Azure Data Lake Storage Gen2:
        - Gen2 is newer version of Azure Data Lake Store (Gen1) that is 
        integrated into Azure Storage
        - It enables you to take advantage of the scalability of blob storage
        and the cost-control of storage tiers, combined with the heirarchical file
        system capabilities and compatibility with major analytics systems of Azure
        Data Lake Store
        - The following services mounts a distributed file system hosted in Azure 
        Data Lake Store Gen2 and use to process huge volumes of data:
            - Azure HDInsight
            - Azure DataBricks
            - Azure Synapse Analytics
        - To create Gen2 files system, you must enable the Heirarchical Namespace
        option of an Azure Storage account
        - The Heirarchical Namespace option can be enabled when creating the storage 
        account or upgrade an existing Azure Storage account to support Gen 2
        - Upgrading is a one-way process and once upgraded, you can't revert to 
        a flat namespace
    
    - Explore Azure Files:
        - It is essentially a way to create cloud-based network shares, such as 
        you typically find in on-premises organizations to make documents and other
        files available to multiple users
        - Organizations can eliminate hardware costs and maintenance overhead, and
        benefit from highly scalable cloud storage for files
        - Create Azure File Storage in a storage account
        - Enables you to share upto 100 TB of data in a single storage account
        which can be distributed across any number of file shares in the account
        - Maximum size of a single file is 1 TB, but you can set quotas to limit
        the size of each share below this figure
        - Currently Azure File Storage supports upto 2000 concurrent connections
        per shared file
        - Upload file to AFS using portal or azcopy command
        - You can also use Azure File Sync to synchronize locally cached copies
        of shared files with the data in Azure File Storage
        - Offers Two Performance Tiers:
            - Standard Storage:
                - Uses HDDs
            - Premium Storage:
                - Uses SSDs
                - Offers greater throughput
        - Supports two common network file sharing protocols:
            - Server Message Block (SMB):
                - File Sharing which is commonly used across multiple OS
            - Network File System (NFS):
                - File sharing used by Linux and MacOS
                - You must use a premium tier storage account and create and configure
                a Virtual Network through which access to the share can be controlled

    - Explore Azure Tables:
        - It is a no-SQL storage solution that makes use of tables containing 
        key/value data items
        - It enables you to store semi-structured data
        - All rows in a table must have a unique key (composed of a Partition
        key and a row key)
        - When you modify data in a table, a timestamp column records the date and
        time the modification was made
        - Columns in each row can vary
        - Has no concepts of foreign keys, relationships, stored procedures, views, etc
        - Data is usually denormalized with each row holding the entire data for a logical
        entity
        - To help fast access, Azure Table Storage splits a table into partitions, which
        is a mechanism for grouping related rows, based on a common property or partition
        key
        - Rows that share the same partition key will be stored togather 
        - A table can contain any number of partitions and partitions are independent
        of each other
        - Partitions can grow or shrink as rows are added to or removed
        - During searching for data, you can include the partition key in the search 
        criteria, which improves the performance by reducing the amount of I/O
        - Items in the same partition are stored in row key order and if an application 
        adds a new row to a table, it ensures that the row is placed in the correct 
        position in the table
        - This helps to perform point queries that identifies a single row and range 
        queries that fetch a contigous block of rows in a partition

Explore Fundamentals of Azure Cosmos DB:
    - Supports Multiple APIs and is a highly scalable DBMS
    - The Internal data structure is abstracted, enabling developers to use Cosmos
    DB to store and query data using APIs with which they are already familier
    - It uses indexes and partitioning to provide fast read and write performance and
    can scale to massive volumes of data
    - You can enable multi-region writes, adding Azure regions of choice to the
    Cosmos DB account so that globally distributed users can each work with data in 
    their local replica
    - It automatically allocates space in a container for your partitions and each
    partitions can grow up to 10 GB in size
    - Indexes are created and maintained automatically without any admin overheads
    - Use Cases of Cosmos DB:
        - IOT and Telematics:   
            - Ingests large amount of data in frequent burst of activity and
            store these information quickly
            - Data then can be used for analytic services like AZML and AZBI
            - Additionally you can process data realtime with Azure Functions
        - Retail and Marketing:
            - Storing Catalog data and for event sourcing in order processing 
            pipelines
        - Gaming:
            - Database tier is a crucial component
            - Games that often require single-millisecond latencies for reads
            and write to provide an engaging in-game experience
            - Game Database needs to be fast and be able to handle massive spikes
            in request rates during new game launches and fature updates
        - Web and Mobile applications:
            - Modelling social interactions
            - Integrating with third party services
            - Building rich personalized experience
            - Uses Xamarin framework for connecting Cosmos DB SDKs with android/iOS

    - Azure Cosmos DB for NoSQL:
        - It is Microsoft's native non-relational service for working with the document
        data model
        - Manages data in JSON document format
        - Uses SQL syntax to work with the data
        """
            SELECT
                *
            FROM 
                customers c
            WHERE 
                c.id="joe@litware.com"
        ""'
        - Result consists of one or more JSON documents
    
    - Azure Cosmos DB for MongoDB:
        - In MongoDB data is stored in Binary JSON (BSON) format
        - Azure Cosmos DB for MongoDB enables developers to use MongoDB client 
        libraries and code with data in Azure Cosmos DB
        - Mongodb uses a compact, object-oriented syntax in which developers use objects
        to call methods
        """
            db.products.find({id:123})
        """
    
    - Azure Cosmos DB for PostgreSQL:
        - It is a native PostgreSQL globally distributed relational database that
        automatically shards data to help build highly scalable apps 
        - You can start building apps on a single node server group
        - As the apps scalability and performance requirements grow, you can seamlessly
        scale to multiple nodes by transparently distributing your tables
        """
            SELECT  
                productsname, 
                price
            FROM 
                products
            WHERE
                productid=123;
        """
    
    - Azure Cosmos DB for Table:
        - It is used to work with data in key-value tables, similar to Azure Table
        Storage (ATS)
        - It offers greater scalability and performance than ATS
        - You can use table API through one of the language-specific SDKs to make 
        calls to your service endpoint to retrieve data from the table
    
    - Azure Cosmos DB for Apache Cassandra:
        - This service is compatible with Apache Cassandra, which uses a column-family
        storage structure
        - Column families are tables, similar to those in a relational database, 
        with the exception that it is not mandatory for every row to have the same
        columns
        """
            SELECT
                *
            FROM    
                employees
            WHERE
                ID=2;
        """
    - Azure Cosmos DB for Apache Gremlin:
        - It is used with data in a graph structure
        - Here entities are defined in Vertices that forms nodes in connected graph
        - Nodes are connected by edges that represent relationships
        - Gremlin sytax includes functions to operate on vertices and edges, enabling
        you to insert, update, delete and query data in the graph