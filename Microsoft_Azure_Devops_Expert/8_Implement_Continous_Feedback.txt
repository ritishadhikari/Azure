Implement tools to track usage and flow:
    - If someone is working on a library, their inner loop includes coding, building, 
    testing and debugging with regular commits to the local git repository
    - The four steps that takes place inside the inner loop is:
        - Coding (Experimentation)
        - Building (Feedback Collection)
        - Testing/ Debugging (Feedback Collection)
        - Committing (Tax)
    - Of all the steps in the inner loop, coding is the only one that adds customer
    value

    - Continous Monitoring:
        - Continous Monitoring helps to continously ensure your application's health,
        performance, reliability and infrastructure as it moves from development to 
        production
        - Azure Monitor is the unified monitoring solution in Azure that provides 
        full-stack observability across applications and infrastructure in the cloud
        and on-premise
        - Continous monitoring in Devops release pipeline allows you to gate or roll
        back your deployment based on monitoring data
        - Automatically get platform metrics, activity logs and diagnostics logs
        from most of your Azure Resources with no configuration
        - Enable deeper monitoring for AKS cluters with Azure Monitor for containers
        and for VMs with Azure Monitor
        - For Infrastructure as a Code:
            - Use Resource Manager templates to enable monitoring and configure alerts
            over a large set of Resources
            - Use Azure Policy to enforce different rules over your resources, which 
            ensures that those resources comply with your corporate standards and SLAs
        - Azure Monitor for Resource Groups provides a simple way to keep track of 
        health and performance of your entire full-stack application and enables drilling
        down into respective components for any investigations or debugging
        - Create alerts in Azure Monitor based on logs and metrics to identify 
        predictable failure states  
        - It is best to make all alerts actionable with the help of actions for 
        notification, ex. SMS, e-mails, push notifications or voice calls
        - Prepare custom dashboards based on standard metrics and logs for the different
        roles in your organization
        - Dashboards can combine data from all Azure resources
        - Prepare Workbooks to ensure knowledge sharing between development and 
        operations which can help customer support or handle fundamental problems
        - Azure Monitor helps you collect metrics and logs relevant to your business and 
        add new data points and use in the following deployment:
            - Use tools in Application Insights to track end-user behavior and 
            engagement
            - Use Impact Analysis to help you prioritize which areas to focus on to
            drive to important KPIs
    - Azure Monitor:
        - Azure Monitor provides Management tools, such as those in Azure Security
        Center and Azure Automation, enabling ingestion of custom log data to Azure 
        - The service aggregates and stores this telemetry in a log data store
        optimized for cost and performance
    
    - Log Analytics:
        - Log Analytics works by running the Microsoft Monitoring Agent service on the
        machine
        - The service locally captures and buffers the events and pushes them securely
        out to the Log Analytics workspace in Azure
        - You can add multiple log analytics workspaces to publish the log data into 
        various workspaces
    
    - Kusto Query Language:
        - This is the primary way to query Log Analytics
        - It can be used directly within the Azure Data Explorer
    
    - Application Insights:
        - You install a small instrumentation package in your application and set up
        an Application Insights resource in the Microsoft Azure Portal
        - The instrumentation monitors your app and sends telemetry data to the portal
        - The application can run anywhere and it does not have to be hosted in Azure
        - You can also set up web tests periodically, sending synthetic requests to 
        your web service
        - Apply powerful analytic and search tools to the raw data in Azure Portal
        - Application Insights configures your application's unique key (AppInsights
        key) and the Application Insights SDK uses this key to identify the Azure App
        Insights workspace the telemetry data needs to be uploaded
        - The SDK and the key are merely used to pump the data points out of your
        application 
        - The heavy lifting of data correlation, analysis and insights is done within
        Azure
    
Develop monitor and status dashboards:
    - Azure Dashboards
        - Azure Dashboards are the primary dashboarding technology for Azure
        - They support both logs and metrics and they can combine data from multiple
        sources, including output from Metrics Explorer, Log Analytics Queries, and
        maps and availability in Application Insights
        - It is integrated with Azure role-based authentication (RBAC)
        - Supports Flexible layout options with full-screen mode
        - Log Charts are limited to the last 30 days only
    
    - View Designer in Azure Monitor:
        - It allows you to create custom visualizations with log data and they
        are used by monitoring solutions to present the data they collect
        - Supports rich visualizations for log data and multi-level drill-in
        (a view that drills into another view)
        - Supports logs but not metrics and does not provide automatic refresh
        - Queries are limited in response size to 8 MB, and query execution time
        of 110 seconds

    - Azure Monitor Workbooks:
        - Workbooks are interactive documents that provide deep insights into your
        data, investigation and collaboration inside the team
        - Useful while troubleshooting guides and incident postportem
        - Supports both logs and metrics with document like flow
        - Templates support the public Github based template gallery
        - Does not provide automatic refresh and no dense layout like dashboards
        which make workbooks less useful as a single pane of glass
    
    - Power BI:
        - It is beneficial for creating business-centric dashboards and reports 
        analyzing long-term KPI trends
        - Import the results of a log query into PowerBI dataset to take advantage 
        of its features, such as combining data from different sources and sharing 
        reports on the web and mobile device
        - Provides rich visualizations and better performance with results cached
        in a cube
        - Extensive interactivity and easy to share throughout your organization
        - It only support logs but not metrics
        - Does not provide Azure Resource Manager Integration, hence can't manage 
        dashboards through ARM
        - Need to import query results into the Power BI model to configure
        - Limitations on result size and refresh

    - Build your own custom Application:
        - Access data in log and metric data in Azure Monitor through their API
        using any REST client
        - It allows you to build your complete websites and applications where you 
        can combine metrics and log data with other data sources
        - It provides significant engineering effort

Design Process to Automate Application Analytics:
    - Assisted Devops with Augmented Search:
        - They are Explicitly designed to deal with application logs' chaotic and
        unpredictable nature
        - Augmented search considers that users don't necessarily know what to search 
        for, especially in chaotic application layer environment
        - The analysis algorithm automatically identifies errors, risk factors, 
        and problem indicators while analyzing their severity by combining semantic
        processing, statistical models and machine learning to analyze and understand
        the events in the logs
        - These insights are displayed as intelligence layers on top of the search
        results, helping the user quickly discover the most relevant and essential
        information
        - It helps devops team to guide through blind spots as devops engineers can
        identify a problem and the root cause in a matter of seconds instead of 
        examining thousands of log events of running multiple checks on the various
        servers
        - Augmented Search will display a layer that highlights critical events during
        the specified period instead of going over thousands of search results
        - These highlights provide information about the sources of the events, 
        assisting in the triage process

    - Integrate Telemetry Data:
        - The primary benefit of telemetry is the ability of an end user to monitor
        the state of an object or environment while physically far removed from it
        - By inserting telemetric data into your production application and 
        environment, the Devops team can automate feedback mechanisms while monitoring
        applications in real time
        - Feedback mechanisms shares continous intelligence with all stakeholders 
        which is critical for product managers, marketing teams and customer support
        - Telemetry data comes with application logs, infrastructure logs, metrics and
        events
        - The measurements are things like memory consumption, CPU performance and
        database response time
        - Telemetry is what makes it possible to collect all that raw data that 
        becomes valuable, actionable analytics
        - Telemetry enables you to make continous improvements and introduce new
        features that to your end users may seem as though you have been reading 
        their minds
        - Issue with telemetry for tech savvy end users is that they tend to disallow
        this type of technologies
    
    - Monitoring Tools and Technology:
        - Continous monitoring of applications in production environments is typically
        implemented with application performance management (APM) solutions that
        intelligently monitor, analyze and manage cloud, on-premises and hybrid
        applications and IT infrastructure
        - These APM solution enable you to monitor your users' experience and improve
        the stability of your application infrastructure
        - It helps identify the root cause of issues quickly to prevent outages
        and keep users satisfied proactively
        - By running APM solutions earlier in the lifecycle, development teams get 
        feedback about how applications will eventually do in production and take 
        corrective action much earlier
        - When shortlisting a monitoring tool, you should seek the following advanced
        features:
            - Synthetic Monitoring:
                - All stakeholders must ensure that internet and intranet mobile and 
                web applications are tested and operated successfully from different 
                points of presence worldwide
            - Alert Management:
                - All stakeholders need to send notifications via email, voice mail,
                text, mobile push notifications and Slack Messages when specific 
                situations or events occur in development, testing, or production
                environments, to get the right people's attention and to manage
                their response
            - Deployment Automation
            - Analytics:
                - Developers need to look for patterns in log messages to identify if
                there's a problem in the code
                - Operations need to do root cause analysis across multiple log files
                to identify the source of the problem in complex applications and
                systems

Share Knowledge within Teams:
    - As staff turnover occur in teams, it's easy for organizational knowledge to
    be lost and it is important to record this knowledge to avoid this loss
    - Azure Devops Project Wiki:
        - Azure Devops project includes an option to create a project wiki which is 
        used to share information with your team to understand and contribute to your
        project
        - Wikis are stored in a repository and no wiki is automatically provisioned
        - Prerequisites:
            - You must have permission to Create a Repository to publish codes as a 
            Wiki
            - While the project administrators group has this permission by default, 
            it can be assigned to others
            - To add or edit wiki pages, you should be a member of the contributors
            group
            - All team members can view the wiki
        - Azure Devops Wikis are written in Markdown and can also include file 
        attachments and videos
        - GitHub flavoured Markdown (GFM) is a formal specification released by Github
        that added extensions to a base format called CommonMark. It is rendered in
        Azure Devops Wikis
        - Mermaid is an essential extension to Markdown because it allows diagrams 
        to be included in the documentation
        - Mermaid overcomes the difficulties of merging documentation represented as 
        binary files 

Manage Alerts, Blameless Retrospective and a Just Culture:
    - Examine about Notification:
        - Application Insights automatically analyzes the performance of your 
        web application and can warn you about potential problems
        - This feature requires no particular setup other than configuring your app
        for Application Insights
        - Smart Detection Notification:
            - Response time Degradation:
                - Your app has started responding to requests more slowly that it used
                to
            - Dependency Duration Degradation:
                - Your app makes calls to a REST API, database or other dependencies
                - The dependency may be responding more slowly than it used to
            - Slow Performance Pattern:
                - Your app appears to have a performance issue that is affecting only 
                some requests
                - Ex. Pages are loading more slowly on one type of browser than others,
                or requests are being served more slowly from one server
        - Smart Detection requires at least eight days of telemetry at a workable volume
        to establish a normal performance baseline
        - After your application has been running for that period, any significant 
        issue will result in a notification
    - Smart Detection Notifications:
        - SD notifications are enabled by default and sent to owners, contributors
        and readers access to the Application Insights Resource
        - To change, configure in the email notification or open Smart Detection 
        settings in Application Insights    
    
    - Improving Slow Pages:
        - Slow Loading because of Large Files:
            - Load the scripts and other parts asynchronously
            - Break the main page into widgets that load their data separately
        - Slow Server Dependencies:
            - Ensure the web server and the database are in the same region
        - Capacity Issues:
            - Look at the server metrics of response times and request counts
            - If response times peak disproportionately with peaks in request counts,
            your servers are likely stretched
    
    - Server Response Time Degradation:
        - The response time degradation tell you:
            - The response time compared to normal response time for this opearation
            - How many users are affected 
            - Count of this operation requests on the day of the detection and seven 
            days before
    
    - Monitoring and Alerts:
        - It enables a system to tell us when it's broken or perhaps tells us what is 
        about to break
        - When the system can't automatically fix itself, we want a human to investigate
        the alert
        - Determine if there's a real problem at hand, mitigate the problem and determine
        the root cause
        - Unless you are doing security auditing on narrowly scoped components of a 
        system, you should never trigger an alert simply because "something seems a 
        bit weird"
    
    - Blameless Retrospective:
        - Blameless Retrospective Process means that engineers whose actions have 
        contributed to an accident can give a detailed account of:
            - What actions do they take at what time
            - What effects do they observe
            - Expectations they have 
            - Assumptions they made
            - Their understanding of the timeline of the events as they occured
        - If an engineer fears being blamed, they might not provide the necessary details 
        to understand the failure's mechanism, pathology and operation
        - It's paramount to understand the pathology of the failure since the action
        made sense to the person when they took it because if it had not made sense,
        they wouldn't have taken action in the first place
        - When Engineers make mistakes and feel safe when giving details about it,
        they are not only willing to be held accountable, but they are also enthusiastic
        about helping the rest of the company avoid the same error in the future
