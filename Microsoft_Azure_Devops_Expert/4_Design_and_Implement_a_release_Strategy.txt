Introduction to Continous Delivery:
    - Eight Principles of Continous delivery:
        - The process for releasing/deploying software must be
        repeatable and reliable
        - Automate Everything
        - If something is difficult or painful, do it more Often
        - Keep everything in source control
        - Done means released
        - Build quality in
        - Everybody has responsibility for the release process
        - Improve continously
    - To deploy more often, we need to consider:
        - Software Architecture as monoliths are hard to deploy
        - Testing Strategy (manual tests don't scale well) 
        - Organization as separated business and IT departments don't work smoothly
    - Continous Delivery is a practice and is being able to deliver 
    software on-demand
    - Deploying every code change to production is what is called Continous 
    deployment

    - Feedback loops or quality gates are required for :
        - A unit test to validate the code
        - An automated build to validate the sources
        - An automated test on a Test Environment
        - Some monitor on a server
        - Usage Instrumentation in the code
    
    - Companies wants to move forward towards Continous Delivery since:
        - They see the value
        - They hear their customers
        - Companies wish to deliver their products as fast as possible
        - Quality should be higher
        - The move to production should be faster
        - Technical Debt should be lower
    - Release:
        - It includes a snapshot of all the information required to carry out all 
        the tasks and actions in the release pipeline:
            - The stages or environments
            - The tasks for each one
            - The values of task parameters and variables
            - The release policies such as trigger, approvers and release queuing
            options
        - There can be multiple deployments of each release, even for one stage
        - When a release deployment fails for a stage, you can redeploy the same
        release to that stage
        - The release pipeline contains all the steps you walk through when you move 
        your artifact from one of the artifact sources through the stages or 
        environments
        - The release is an instance of the release pipeline
        - Release Pipeline is the blueprint through which releases are done

Create a Release pipeline:
    - Capabilities for Service Containers and Container Jobs can be run in YAML 
    pipelines only and not in classic build and classic release
    - The components that make up the release pipeline or process are used to create
    a release
    - Components in a release pipeline:
        - Artifacts:
            - Comes from various sources like build pipeline or source control
            - It is a deployable component of your application which can then be 
            deployed to one or more environments
            - Artifacts will be deployed to multiple environments
            - Most common way to get an artifact within the release pipeline is 
            to use a build artifact which uses a versioned artifact
            - The artifact is linked to the build and gives us automatic traceability
            and it gives us automatic traceability
            - The build pipeline compiles, tests and eventually produces an 
            immutable package stored in a secured place (storage, database, etc)
            - The release pipeline then uses a secure connection to this secured
            place to get the build artifact and do extra actions to deploy it to
            an environment
            - Another common artifact source is version control  (VC) where the 
            releases is related to a specific commit in our version control system
            - VC makes more sense if you want to deploy one specific file and you 
            don't need to run more actions before using this file in your release
            pipeline
            - With the VC, we can also see which version of a file or script is
            eventually installed, where in the version does not come from the 
            build but version control
            - Another possibility of an artifact source is a network share containing
            a set of files but it is risk prone as other people may have access to 
            the network share where the package was put
            - Container Registries are upcoming regarding artifact sources which
            stores container artifacts
            - A proper mechanism to make sure you can provide the correct 
            traceability and auditability is using immutable packages by versioning
            those packages
            - Using a build pipeline that produces a package stored in a location
            that humans can't access, you ansure the sources are unchanged throughout
            the whole release-process and this is an essential concept of release
            pipelines

        - Trigger:
            - Manual Trigger 
            - Schedueled Trigger (Cron)
            - Continous Deployment Trigger, where another event triggers a release,
            ex. a completed build
        - Stages:
            - This is where the artifacts will be eventually installed
            - You may have many stages and part of the release strategy is finding the
            appropriate combination of stages
            - Trigger of a particular stage can happen in three ways:
                - After Release:
                    - Stage which immediately follows a release
                - After Stage:
                    - Completion of another stage
                - Manual Only:
                    - Requires Manual Triggering
                - The name stages is a better fit than environment even though
                the stages can be used for environments
        - Approval:
            - People often sign a release before installing it in the environment
            - The manual process can be replaced by an automatic process that checks
            the quality before the components move on to the next stage
        - Tasks:
            - Steps that need to be executed to install, configure and validate the 
            installed artifact
        - Jobs:
            - A release job is executed by a build/release agent. This agent can
            only run one job at the same time 
            - You specify a series of tasks you want to run on the same agent during
            your job design
            - The release pipelines brings the artifacts togather and wants to deploy
            the backend, frontend, and mobile app all together as part of one release
            - The deployment takes place on different agents
            - By default, jobs run on the host machine where the agent is installed

    - When designing your release strategy, chose your triggers carefully and 
    consider the required release cadence