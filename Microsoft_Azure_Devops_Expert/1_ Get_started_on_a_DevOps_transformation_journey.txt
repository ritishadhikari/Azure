Intoduction to Devops
    - Devops professionals design and implement application code and infrastructure
    strategies that allow continous integration, testing, delivery, monitoring,
    and feedback
    - Devops professionals must design and implement Devops practices for version
    control, compliance, infrastructure as code, configuration management, build,
    release and testing-using Azure technologies
    - When you adopt devops practices:
        - You shorten your cycle time by working in smaller batches
        - Using more automation
        - Hardening your release pipeline
        - Improving your telemetry
        - Deploying more frequently
    - Continous Integration drives the ongoing merging and testing of code,
    leading to an early finding of defects. Other befenefits include less
    time wasted fighting merge issues and rapid feedback for development teams
    - Continous Delivery of software solutions to production and testing
    environments helps organizations quickly fix bugs and respond to ever-changing
    business requirements
    - Version Control enables teams worldwide to communicate effectively during
    daily development activities and integrate with software development tools for
    monitoring activities such as deployments
    - Monitoring and Logging of running applications, including production 
    environments for application health and customer usage
    - Infrastructure as Code (IaC) enables the automation and validation of the
    creation and teardown of environments to help deliver secure and stable 
    applications hosting platforms
    - Microservices architecture isolates business use cases into small reusable
    services that communicate via interface contracts. This architecture enables
    scalability and efficiency
    - Advantages of Shorter Timelines:
        - It is easier to change plans or priorities when necessary
        - The reduced delay between doing work and getting feedback helps ensure
        that the learnings and feedback are incorporated quickly
        - It is easier to keep organizational support when positive outcomes
        are clear

Choose the right Project:
    - Devops can succeed both in greenfield as well as brownfield projects
    - Management might have a stronger sense of urgency to point brownfield
    projects in an appropriate direction when compared to greenfield projects
    that don't currently exists
    - In looking to take the first step, many organizations start with a greenfield
    project and then move on
    - Systems of Record:
        - Systems that provide the truth about data elements
        - These systems have historically evolved slowly and carefully
        - Ex. It is crucial that a banking system accurately reflects your balance
        - It emphasize accuracy and security
    - Systems of Engagement:
        - Systems that are more exploratory
        - Uses experimentation to solve new problems and are modified regularly
        - An issue with a system of engagement might end up causing a problem
        in a system of record

    - Devops practices apply to both types of systems, while the most significant 
    outcomes often comes from transforming systems of record

    - Users are categorized into three general buckets:
        - Canary:
            - Users who voluntarily test bleeding edge features as soon as they
            are available
        - Early Adopters:
            - Voluntarily preview releases, considered more refined than the code
            that exposes canary users
        - Users:
            - Consumes the products after passing through canary and early Adopters
    
    - It is essential to find staff members keen to see new features as soon as
    they are available and highly tolerant of issues when choosing canary
    - It is essential to find improvement goals that:
        - Can be used to gain early wins
        - Small enough to be achievable in a reasonable timeframe
        - Has benefits that are significant enough to be evident to the organization
        - Allows constant learning from rapid feedback and recovering from mistakes
        quickly
    
    KPIs based on Faster Outcomes:
        - Deployment Frequency:
            - Increase the frequency of deployment
        - Deployment Speed:
            - Necessary to reduce the time that it takes
        - Deployment Size:
            - How many features, stories and bug fixes are being deployed each time
        - Lead Time:
            - How long does it take from the creation of a work item until it
            is completed
    
    KPIs based on Efficiency:
        - Server to Admin Ratio:
            - Number of admins required for a given number of servers
            - Less the better
        - Staff Members to Customers Ratio:
            - Staff members for a given number of customers
            - Less the better
        - Application Usage:
            - How busy the application
        - Application Performance:
            - Is the application performance improving or degrading  
    
    - KPI based on Quality and Security:
        - Deployment Failure Rates:
            - How often do deployments fail
        - Application Failure Rate:
            - How often do application failures occur, such as configuration
            failures, performance failures and so on
        - Mean time to recover:
            - How quickly can you recover from a failure
        - Bug Report Rates:
            - The amount of time the customers are seeing bugs in your code
            - Lower the better
        - Test Pass Rates:
            - How well is your automated testing working
        - Defect Escape Rate:
            - What percentage of time is the application truly available for customers
        - Availability:
            - What percentage of time is the application truly available for customers
        - Service Level Agreement Achievement:
            - Are you meeting your service level agreement (SLAs)
        - Mean time to Detection:
            - If there is a failure, how long does it take for it to be detected
    
    - KPIs based on Culture:
        - Employee Morale:
            - Are employees happy with the transformation and where the organization
            is heading
            - Measured by anonymous employee surveys
        - Retention Rates:
            - Is the organization loosing staff

Describe Team Structures:
    - The Waterfall model follows a sequential manner
    - Agile Methodology constantly emphasizes adaptive planning and early 
    delivery with continual improvement
    - Agile Software methods are based on releases and iterations, where one 
    release might consist of several iterations
    - At the end of each iteration, there should be tested working code
    - Waterfall focuses on completing the project while Agile focuses on meeting
    customers' demand
    - Horizontal teams divide teams according to software architecture
    - Vertical team structures span the architecture and are alligned with 
    skillsets or disciplines. It has shown to provide more good outcomes in 
    Agile Projects 
    - In Vertical team structure, scaling can occur by adding teams
    
    - Agile coaches:
        - Help teams or individuals to adopt agile methods or to improve the
        current techniques and practices
        - They work with more than one team and remove any roadblocks from inside
        or outside the organization
    
    - Asynchronous communications should be encouraged and there should not be
    an expectation that all communications will be responded to urgently
    - Staff should focus on their primary tasks without feeling like they are
    being left out of important decisions

    - Bringing cross-functional teams together helps to spread knowledge 
    across an organization

    - Collaboration Tools:
        - Microsoft teams
        - Slack
        - Jira
        - Asana
        - Glip
    
    - As a complete CI/CD system in Azure Devops and Github, it includes:
        - Flexibility in Kanban Boards
        - Traceability through Backlogs
        - Customizability in dashboards
        - Built-in scrum Boards
        - Integrability directly with code repositories
        - Code changes can be linked directly to tasks or bugs
    
Choose the Devops Tools:
    - Azure Devops is a Software as a Service (SaaS) platform from Microsoft
    that provides an end-to-end Devops toolchain for developing and Deploying software
    - It is:
        - Flexible:
            - Possible to adopt each of the services independently
        - Cross-Platform:
            - Supports multiple OS and Multiple Programming language
        - Cloud Agnostic:
            - Supported in AWS, GCP and Azure
    - Azure Devops Provide:
        - Azure Boards:
            - Agile Planning
            - Work Item Tracking
            - Visual item Tracking
            - Visualization
            - Reporting Tools
        - Azure Pipelines:
            - A language, platform and cloud agnostic CI/CD platform-supporting
            containers or Kubernetes
        - Azure Repos:
            - Provides Cloud-hosted private git repos
        - Azure Artifacts:
            - Provides integrated package management with support for Maven, npm,
            Python and NuGet package feeds from public or private sources
        - Azure Test Plans:
            - Provides and integrated planned and exploratory testing solution

    - Github Provides:
        - Codespace:
            - Cloud Hosted development environment
            - Can be operated within a browser or external tools
            - Eases cross platform development
        - Repos:
            - Public and Private repositories based upon industry-standard
            Git Command
        - Actions:
            - Allows for the creation of automation workflows
            - Includes environment variables and customized scripts
        - Packages:
            - Integrate with Code and other third-party offerings
        - Security:
            - Provides detailed code scanning and review features
            - Includes Automated code review assignment
    
    - Personal Access Token:
        - Are very helpful when establishing access to command-line tools,
        external tools and tasks in build Pipelines
        - These tokens can be set up using Git Credential Managers, or you can 
        create them manually
        - Use PAT for tools that don't directly support Microsoft Accounts or 
        Azure AD for authentication
    
    - Security Access:
        - Azure Devops is pre-configured with default security groups where default 
        permissions are assigned 
        - You can also configure access at the organization, collection and project
        or object levels
        - Configure app access policies in the organizational settings in Azure
        Devops
        - Based on the security policies, you may allow alternate authentication 
        methods, enable third-party applications to access via OAuth, or even 
        allow anonymous access to some projects
        - For tighter control, you can also use Conditional Access Policies
    - Multifactor Authentication:
        - It is a form of Conditional Access Policy
        - It can help to minimize the risk of compromised credentials
        - You might require:
            - Security Group Membership
            - A location or network identity
            - A specific operating system
            - A managed device or other criteria
    
    - Migrating from other work management tools to Azure Devops takes considerable
    planning and there might not be a single tool available that will do the 
    migration without further configuration

    - Azure Test Management Tools:
        - Azure Test Plans track manual testing for sprints and milestones, allowing
        you to follow when that testing is complete
        - Azure Devops also has a Test Feedback extension available in the Visual
        Studio Marketplace, which helps teams do exploratory testing and provide
        feedback
        - For Load Test, use Azure Load testing
    
    - Designing a Licence Management Strategy:
        - You first need to understand your progress in the Devops implementation
        phase
        - If you have a draft of the architecture, you are planning for the 
        Devops implementation, you already know part of the resources to Consume

Plan Agile with GitHub Projects and Azure Boards:
    
    - Project Boards:
        - Helps to take control of specific feature work, roadmaps, release plans, etc
        - They are made up of issues, pull requests and notes categorized as cards, 
        which you can drag and drop into your chosen columns
    
    - Three different types of project boards:
        - User-Owned Project Boards:
            - Contain issues and pull requests from any personal repository
        - Organization-wide project boards:
            - Contain issues and pull requests from any repository that belongs to an 
            organization
        - Repository project boards:
            - Scoped to issues and pull requests within a single repository
    
    - To create a project board for your organization, you must be an organization member

    - Templates for new projects:
        - Basic Kanban:
            - Track your tasks with:
                - Todo
                - In Progress
                - Done
        - Automated Kanban:
            - Cards Automatically move between:
                - Todo
                - In Progress
                - Done
        - Automated Kanban with Review:
            - Additional to the features in Automated Kanban, there is an extra 
            trigger for pull requests review status
        - Bug Triage:
            - Triage and Prioritize Bugs with:
                - To do
                - High Priority
                - Low Priority
                - Closed Columns
        
    - Projects:
        - They are customizable tool version of projects for planning and tracking 
        work on Github
        - It is a customizable spreadsheet in which you can configure the layout by 
        filtering, sorting, grouping your issues and PRs and adding custom field to 
        track metadata

Azure Boards:
    - It is a customizable tool to manage software projects supporting Agile, Scrum 
    and Kanban processes
    - Track work, issues and code defects associated with your projects
    - Create custom process templates and use them to create a better and more customized 
    experience
    - The Kanban board is one of the several tools that allows you to add, update and 
    filter user stories, bugs, features and epics
    - Each work item provides a standard set of system fields and controls, including 
    discussions for adding and tracking comments, history, Links and Attachments
    
    - Delivery Plans:
        - Create another view with deliverables and track dependencies across several
        teams in a calendar view using Delivery Plans
        - It is fully interactive supporting the following tasks:
            - View upto 15 team backlogs, including a mix of backlogs and teams from 
            different projects
            - View Custom portfolio backlogs and epics
            - View Work that spans several iterations
            - Add backlog items from a plan 
            - View rollup progress of features, epics and other portfolio items
            - View dependencies that exists between work items
    
    - Linking Github to Azure Boards
        - Connect Azure Boards with Github repositories, enabling linking Github commits, 
        pull requests, and issues to work items in Boards
        - Integration of Azure Boards and Github is created using Azure Boards App. 
        - You must be an administrator or owner of the Github repository or the Github 
        Organization. 
        - Azure Board App Available in the Github Marketplace
        - You can configure other Azure Boards/ Azure Devops Projects, Github.com 
        repositories, or change the current configuration from the Azure Boards app page
        - After the integration, you can add or remove repositories from the web 
        portal for Azure Boards
        - From Azure Board, you can allow a github repository to connect to one or more 
        Azure Boards projects within the same Azure Devops Organization or collection
    
    - In Github Projects, you can control project deliverables, release dates, and 
    interations to plan upcoming work
    
    - You can create iteration to:
        - Associate items with specific repeating blocks of time
        - Set to any lengths of time including breaks
        - Three iterations are automatically created
    
    - Github Project View:
        - Using Project Views, you can organize information by changing the layout, 
        grouping, sorting and filtering your work
        - This allow you to view specific aspects of your project where each view is 
        displayed on a separate tab in your projects:
            - A view that shows all items not yet started
            - A view that shows the workload for each item 
            - A view shows the items with the earliest target ship date 
            (sort by a date field)

    - Github Team Meetings:  
        - Instead of opening an issue in a repository to discuss an idea, you can 
        include the entire team by having a conversation in a team discussion
        - Pin Important posts to your team's page
        - Receive email or web notifications
        - Link to any team discussion and reference it elsewhere

Introduction to Source Control:
    - Source Control is an essential tool for multi-developer projects
    - It protects source code from catastrope and the casual degradation of human 
    error and unintended consequences
    - If changes are made to the source code, you can go back in time and easily roll
    back to previous-working versions
    - For the management, the critical value of version is in:
        - IP Security
        - Risk Management
        - Time-to-Market speed through Continous Delivery, where version control is 
        a fundamental enabler
    - Automate testing, code analysis, and deployment when new versions are saved
    to version control

    - Best Practices for Source Control:
        - Make Small changes
        - Do not commit personal files
        - Update often and right before pushing to avoid merge conflicts
        - Verify your code change before pushing it to a repository
        - Pay close attention to commit messages, as it will tell you why a change
        was made
        - Link code changes to work items
        - No matter your background or preferences, be a team player and follow 
        agreed conventions and workflows

Describe types of Source Control systems:
    
    - Centralized Source Control:
        - Based on the idea that there's a single "central" copy of your
        project somewhere (probably on a server)
        - Programmers will check in (or commit) their changes to this central
        copy
        - Most modern version control systems deal with changesets, which 
        are a group of changes (possibly too many files) that should be 
        treated as a cohesive whole
    
    - Distributed Source Control:
        - These systems don't necessarily rely on a central server to store
        all the versions of a project's files
        - Instead every developer "clones" a repository copy and has the project's
        complete history on their local storage. This copy has all the original
        metadata
        - You move (pull and push) changesets (change to file groups as coherent
        wholes), not single-file diffs
        - Since each programmer has a full copy of the project repository, they
        can share changes with one, or two other people to get feedback before
        showing the changes to everyone
        - Distributed systems don't prevent you from having a single "central"
        repository and they provide more options
        - If your project has a long history (50,000 changesets or more),
        downloading the entire history can take an impractical amount of time
        and disk space

    - Team Foundational Version Control (TVFC-centralized):
        - Team members have only one version of each file on their dev machines
        - Historical data is maintained only on the server
        - Branches are path based and created on the server
        - Most operations require developers to be connected to the server,
        which help lock workflows
        - You can scale up to huge codebases with millions of files per branch
        with server workspaces
        - Through Local workspaces, each team member copies the latest codebase
        version with them and works offline as needed
    
    - In TVFC, each developer gets a working copy that points back to a single
    central repository, while in Git, instead of a working copy, each developer
    gets their local repository, complete with an entire history of commits.

    - Unlike centralized version control systems, Git branches are cheap and 
    easy to merge
    - Using Trunk based development is more reliable than directly-editing
    production code, but it also provides organizational benefits as they
    represent development work at the same granularity as your agile backlog
    where you might implement a policy where each work item is addressed in 
    its feature branch

    - Pull Requests:
        - Azure Repos enhance core Git functionality with pull requests
        - Since there are comment thread attached to a feature branch, pull
        requests are incredibly versatile
        - When a developer gets stuck with a complex problem, they can open a 
        pull request to ask for help from the rest of the team
    
    - Faster Release Cycle:
        - It is the ultimate result of feature branches, distributed development,
        pull requests, and a stable community
        - These capabilities promotes an agile workflow where developers are
        encouraged to share minor changes more frequently 
        - Git hooks allow you to run scripts when certain events occur inside a
        repository, which lets you automate deployment to your heart's content
        - You can also build or deploy code from specific branches to different 
        servers
    
    - Problems of OverWriting History:
        - If you are synchronizing to Azure Repos, you can add a security rule
        that prevents developers from overwriting history by using the explicit
        "Force Push" permissions
    
    - Handling the Large File Problem:
        - Binary Files are worse, since Git cannot optimize how they are stored
        - Git LFS lets you separate large files of your repos and still has
        all the benefits of versioning and comparing
        - Use Artifacts or some other package management tools to store binaries
        for which you have source code
    
Work with Azure Repos and Github:
    
    - Azure Repos:
        - Set of version control tools that you can use to manage your code
        - Provides two types of version control:
            - Git for distributed version control
            - Team Foundation Version Control (TVFC): Centralized Version Control
        - Use Git or TVFC repositories on Azure Repos with your IDE and editor
    
    - Azure Repos Benefits: 
        - Use Free Git Repositories, Pull Requests and Code Search
        - Support for any Git Client, while securely connecting with and pushing code
        into your Git Repository from any IDE, editor or Git Client
        - Web Hooks and API integration
        - Semantic Code Search by quickly finding what you are looking for with a 
        code-aware search that understands classes and variables
        - Collab to build better code through Git Code Reviews, threaded discussions,
        continous integration for each change and forks to promote collaborations
        - Automation with built-in CI/CD by triggering builds, tests, deployments, by
        including every completed pull requests using Azure Pipeline or other tools
        - Protection of code quality with branch policies, by requiring code-server 
        sign-out, successful builds, and passing tests before merging pull requests
        - Customize your branch policies to maintain your team's high standard
    
    - Github:
        - Each repository includes a wiki and issue tracker, making it easy to have
        more in-depth documentation and get feedback about your project
        
        - Features of Github:
            - Automate code to cloud by cycling your production code faster and simplify
            your workflows with Github packages and built-in CI/CD using Github Actions
            - Secure software by getting alerts about vulnerabilities in your code, 
            and automatically opening pull requests to update dependencies to the
            minimum version that resolves known vulnerabilities
            - All your code and documentation in one place. Host your documentation 
            directly from your repositories with github pages. Use Jekyll as a static
            site generator and publish your pages from the docs folder of main branch
            - Manage your ideas by co-ordinating early, staying alligned and getting
            more done with Github's project management tools. Track and assign issues,
            discuss an idea with an @mention or start distributing work
            - Manage and grow teams, by giving people access as administrative roles,
            and fine tune permissions with nested teams
            - Moderation tools like issue and pull request locking, help your team 
            stay focussed on code. User blocking reduces noise and ensures productive
            conversations
        
        - Migration of TVFC to Git happens:
            - Single Branch Import:
                - While in TVFC and in Azure Devops, you have the option of a simple
                single-branch import
                - You can add upto 180 days of history
                - Add in the name of the repo, and the import will be triggered
            - Import Repository:
                - Allows you to import a git repository into Azure Repos
            - Git TFS:
                - Migrate Multiple Branches and preserve the relationship to merge 
                branches in Git after you migrate
                - Doing this conversion can take a while - especially for large or 
                long-history repositories
                - If you are on sub-version, you can use GIT-SVN to import your 
                subversion repo to GIT-TFS
        
        - Github CodeSpace:
            - Codespace is a cloud-based development environment that Github hosts
            - It is essentially an online implementation of Visual Studio Code
            - It allows developers to work entirely in the cloud
            - The development environment is rich with:
                - Syntax Highlightning
                - Auto complete
                - Integrated Debugging
                - Direct Git Integration
            - Developer create codespaces (or multiple codespaces) for a repository
            - Each codespace is associated with a specific branch of a repository
            - You can also connect to a codespace from a local copy of VS Code