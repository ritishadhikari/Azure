Intoduction to Devops
    - Devops professionals design and implement application code and infrastructure
    strategies that allow continous integration, testing, delivery, monitoring,
    and feedback
    - Devops professionals must design and implement Devops practices for version
    control, compliance, infrastructure as code, configuration management, build,
    release and testing-using Azure technologies
    - When you adopt devops practices:
        - You shorten your cycle time by working in smaller batches
        - Using more automation
        - Hardening your release pipeline
        - Improving your telemetry
        - Deploying more frequently
    - Continous Integration drives the ongoing merging and testing of code,
    leading to an early finding of defects. Other befenefits include less
    time wasted fighting merge issues and rapid feedback for development teams
    - Continous Delivery of software solutions to production and testing
    environments helps organizations quickly fix bugs and respond to ever-changing
    business requirements
    - Version Control enables teams worldwide to communicate effectively during
    daily development activities and integrate with software development tools for
    monitoring activities such as deployments
    - Monitoring and Logging of running applications, including production 
    environments for application health and customer usage
    - Infrastructure as Code (IaC) enables the automation and validation of the
    creation and teardown of environments to help deliver secure and stable 
    applications hosting platforms
    - Microservices architecture isolates business use cases into small reusable
    services that communicate via interface contracts. This architecture enables
    scalability and efficiency
    - Advantages of Shorter Timelines:
        - It is easier to change plans or priorities when necessary
        - The reduced delay between doing work and getting feedback helps ensure
        that the learnings and feedback are incorporated quickly
        - It is easier to keep organizational support when positive outcomes
        are clear

Choose the right Project:
    - Devops can succeed both in greenfield as well as brownfield projects
    - Management might have a stronger sense of urgency to point brownfield
    projects in an appropriate direction when compared to greenfield projects
    that don't currently exists
    - In looking to take the first step, many organizations start with a greenfield
    project and then move on
    - Systems of Record:
        - Systems that provide the truth about data elements
        - These systems have historically evolved slowly and carefully
        - Ex. It is crucial that a banking system accurately reflects your balance
        - It emphasize accuracy and security
    - Systems of Engagement:
        - Systems that are more exploratory
        - Uses experimentation to solve new problems and are modified regularly
        - An issue with a system of engagement might end up causing a problem
        in a system of record

    - Devops practices apply to both types of systems, while the most significant 
    outcomes often comes from transforming systems of record

    - Users are categorized into three general buckets:
        - Canary:
            - Users who voluntarily test bleeding edge features as soon as they
            are available
        - Early Adopters:
            - Voluntarily preview releases, considered more refined than the code
            that exposes canary users
        - Users:
            - Consumes the products after passing through canary and early Adopters
    
    - It is essential to find staff members keen to see new features as soon as
    they are available and highly tolerant of issues when choosing canary
    - It is essential to find improvement goals that:
        - Can be used to gain early wins
        - Small enough to be achievable in a reasonable timeframe
        - Has benefits that are significant enough to be evident to the organization
        - Allows constant learning from rapid feedback and recovering from mistakes
        quickly
    
    KPIs based on Faster Outcomes:
        - Deployment Frequency:
            - Increase the frequency of deployment
        - Deployment Speed:
            - Necessary to reduce the time that it takes
        - Deployment Size:
            - How many features, stories and bug fixes are being deployed each time
        - Lead Time:
            - How long does it take from the creation of a work item until it
            is completed
    
    KPIs based on Efficiency:
        - Server to Admin Ratio:
            - Number of admins required for a given number of servers
            - Less the better
        - Staff Members to Customers Ratio:
            - Staff members for a given number of customers
            - Less the better
        - Application Usage:
            - How busy the application
        - Application Performance:
            - Is the application performance improving or degrading  
    
    - KPI based on Quality and Security:
        - Deployment Failure Rates:
            - How often do deployments fail
        - Application Failure Rate:
            - How often do application failures occur, such as configuration
            failures, performance failures and so on
        - Mean time to recover:
            - How quickly can you recover from a failure
        - Bug Report Rates:
            - The amount of time the customers are seeing bugs in your code
            - Lower the better
        - Test Pass Rates:
            - How well is your automated testing working
        - Defect Escape Rate:
            - What percentage of time is the application truly available for 
            customers
        - Availability:
            - What percentage of time is the application truly available for
            customers
        - Service Level Agreement Achievement:
            - Are you meeting your service level agreement (SLAs)
        - Mean time to Detection:
            - If there is a failure, how long does it take for it to be detected
    
    - KPIs based on Culture:
        - Employee Morale:
            - Are employees happy with the transformation and where the organization
            is heading
            - Measured by anonymous employee surveys
        - Retention Rates:
            - Is the organization loosing staff

Describe Team Structures:
    - The Waterfall model follows a sequential manner
    - Agile Methodology constantly emphasizes adaptive planning and early 
    delivery with continual improvement
    - Agile Software methods are based on releases and iterations, where one 
    release might consist of several iterations
    - At the end of each iteration, there should be tested working code
    - Waterfall focuses on completing the project while Agile focuses on meeting
    customers' demand
    - Horizontal teams divide teams according to software architecture
    - Vertical team structures span the architecture and are alligned with 
    skillsets or disciplines. It has shown to provide more good outcomes in 
    Agile Projects 
    - In Vertical team structure, scaling can occur by adding teams
    
    - Agile coaches:
        - Help teams or individuals to adopt agile methods or to improve the
        current techniques and practices
        - They work with more than one team and remove any roadblocks from inside
        or outside the organization
    
    - Asynchronous communications should be encouraged and there should not be
    an expectation that all communications will be responded to urgently
    - Staff should focus on their primary tasks without feeling like they are
    being left out of important decisions

    - Bringing cross-functional teams together helps to spread knowledge 
    across an organization

    - Collaboration Tools:
        - Microsoft teams
        - Slack
        - Jira
        - Asana
        - Glip
    
    - As a complete CI/CD system in Azure Devops and Github, it includes:
        - Flexibility in Kanban Boards
        - Traceability through Backlogs
        - Customizability in dashboards
        - Built-in scrum Boards
        - Integrability directly with code repositories
        - Code changes can be linked directly to tasks or bugs
    
Choose the Devops Tools:
    - Azure Devops is a Software as a Service (SaaS) platform from Microsoft
    that provides an end-to-end Devops toolchain for developing and Deploying
    software
    - It is:
        - Flexible:
            - Possible to adopt each of the services independently
        - Cross-Platform:
            - Supports multiple OS and Multiple Programming language
        - Cloud Agnostic:
            - Supported in AWS, GCP and Azure
    - Azure Devops Provide:
        - Azure Boards:
            - Agile Planning
            - Work Item Tracking
            - Visual item Tracking
            - Visualization
            - Reporting Tools
        - Azure Pipelines:
            - A language, platform and cloud agnostic CI/CD platform-supporting
            containers or Kubernetes
        - Azure Repos:
            - Provides Cloud-hosted private git repos
        - Azure Artifacts:
            - Provides integrated package management with support for Maven, npm,
            Python and NuGet package feeds from public or private sources
        - Azure Test Plans:
            - Provides and integrated planned and exploratory testing solution

    - Github Provides:
        - Codespace:
            - Cloud Hosted development environment environment
            - Can be operated within a browser or external tools
            - Eases cross platform development
        - Repos:
            - Public and Private repositories based upon industry-standard
            Git Command
        - Actions:
            - Allows for the creation of automation workflows
            - Includes environment variables and customized scripts
        - Packages:
            - Integrate with Code and other third-party offerings
        - Security:
            - Provides detailed code scanning and review features
            - Includes Automated code review assignment
    
    - Personal Access Token:
        - Are very helpful when establishing access to command-line tools,
        external tools and tasks in build Pipelines
        - These tokens can be set up using Git Credential Managers, or you can 
        create them manually
        - Use PAT for tools that don't directly support Microsoft Accounts or 
        Azure AD for authentication
    
    - Security Access:
        - Azure Devops is pre-configured with default security groups where default 
        permissions are assigned 
        - You can also configure access at the organization, collection and project
        or object levels
        - Configure app access policies in the organizational settings in Azure
        Devops
        - Based on the security policies, you may allow alternate authentication 
        methods, enable third-party applications to access via OAuth, or even 
        allow anonymous access to some projects
        - For tighter control, you can also use Conditional Access Policies
    - Multifactor Authentication:
        - It is a form of Conditional Access Policy
        - It can help to minimize the risk of compromised credentials
        - You might require:
            - Security Group Membership
            - A location or network identity
            - A specific operating system
            - A managed device or other criteria
    
    - Migrating from other work management tools to Azure Devops takes considerable
    planning and there might not be a single tool available that will do the 
    migration without further configuration

    - Azure Test Management Tools:
        - Azure Test Plans track manual testing for sprints and milestones, allowing
        you to follow when that testing is complete
        - Azure Devops also has a Test Feedback extension available in the Visual
        Studio Marketplace, which helps teams do exploratory testing and provide
        feedback
        - For Load Test, use Azure Load testing
    
    - Designing a Licence Management Strategy:
        - You first need to understand your progress in the Devops implementation
        phase
        - If you have a draft of the architecture, you are planning for the 
        Devops implementation, you already know part of the resources to Consume
