Explore Package Dependencies:
    - A team that is writing software won't write every piece of code by
    itself but use existing code written by other teams or companies and
    open-source code is readily available
    - Each component can have its maintainers, speed of change, and 
    distribution, giving both the creators and consumers of the components autonomy
    - A software engineer will need to identify the components that make
    up parts of the solution and decide whether to write the implementation
    or include an existing component, the later introduces a dependency 
    on other components
    - Without proper dependency management, it will be hard to keep the
    components in the solution controlled
    - Management of dependencies allows a software engineer and team to be
    more efficient working with dependencies
    
    - Elements of a dependency management strategy:
        - Standardization:
            - Managing dependencies benefit from a standardized way of declaring and
            resolving them in your codebase
            - It allows for a repeatable, predictable and usage that can be automated
            as well
        - Package Formats and sources:
            - The distribution of dependencies can be performed by a packaging method
            suited for your solution's dependency type
            - Each dependency is packaged using its usable format and stored in a 
            centralized source
        - Versioning:
            - While codebase grows and changes, you need to consider the changes in 
            your dependencies as well
            - It requires a versioning mechanism for the dependencies to be selective
            of the version of a dependency you want to use
    
    - A thorough investigation of your codebase is necessary to pinpoint sections
    of code that should be classified as dependencies 
    - This calls for modifying how you arrange your code and construct the solution
    - Source Componentization:
        - Focusses on source code
        - Refers to the splitting of the source code in the codebase into separate 
        parts and organizing it around the identified components
        - It works if the source code isn't shared outside of the project
    - Package Componentization:
        - Involves distribution of software components by utilizing packages as a formal
        way of wrapping and handling the components
        - A shift to packages adds characteristics needed for proper dependency 
        management, like tracking and versioning packages in your solution

Understand Package Management:
    - Standard Formats of Packages:
        - NuGet:
            - For .net code artifacts
        - npm:
            - For Javascript artifacts
        - Maven:
            - For Java based products
        - Pypi:
            - For Python
        - Docker:
            - Contains Docker Images
    - Packages should be stored in a centralized place for distribution and consumption
    to take dependencies on the component it contains
    - The centralized storage for packages is commonly called a package feed or 
    repository or registry
    - A particular package can exist in multiple versions in the feed, catering for 
    consumption of a specific version
    - Typically open source projects for applications, libraries and frameworks arrange
    shared with everyone and publically available
    - The feeds can be exposed in public or private to distinguish in visibility
    - Anyone can consume public feeds while private feed can only be consumed by those
    who are allowed access
    - Components developed for internal use might be available only to the project,
    team or company that developed it
    - Each Software project that consumes packages to include the required dependencies
    will use the package manager and more package sources
    - The package manager will download the individual packages from the sources and
    install them locally on the development machine or build server
    - It is possible to refer to multiple sources from a single software solution 
    - When combining private and public sources, the order of resolution of the 
    sources becomes essential
    - One way to specify multiple package source is by choosing a primary source and
    an upstream source
    - The package manager will evaluate the primary source first and switch to the
    upstream source when the package is not found there
    - A typical scenario is to use a private source referring to a public upstream
    source for one of the official feeds
    - Only priviledged roles can add upstream sources to a private feed
    
    - Azure Artifacts:
        - The artifact management is called Azure Artifacts and was previously known 
        as Package Management
        - It offers public and private feeds for software packages of various types
        - Azure Artifacts currently supports feeds that can store five different 
        package types
            - NuGet packages
            - npm packages
            - Maven
            - Universal packages
                - These are Azure artifact-specific package type
                - It is a versioned package containing muliple files and folders
            - Python
        - When creating your solution, you will decide which packages you want to 
        consume to offer the dependent components
        - The next step is to determine the source of these packages where the main
        choice is selecting public and private feeds or a combination of it
        - Once you have authenticated to Azure Devops, you can pull and push packages 
        to the package feed, provided you have the permission to do so
        - Pushing packages is done with the tooling for the package manager and each
        of the package managers and tooling has a different syntax for pushing
        - Packages might need to be updated during their lifetime, and updating a 
        package is made by pushing a new version of the package to the feed
        - The package feed manager manages to properly store the updated package with 
        the existing packages in the feed

Migrate Consolidating and Secure Artifacts:
    - An artifact is a deployable component of your application
    - When you are creating a release pipeline, you need to link the required
    artifact sources, which often will be the output of a build pipeline from a 
    CI systems like Azure Pipelines, Jenkins, etc
    - The artifacts that you produce might be stored in source control like Git or 
    TFVC; you might also be using package management tools when you get repositories
    - You might need to choose a specific branch, a specific build version or perhaps
    you need to specify tags
    - Store Package Binaries in Universal packages and not git
    - Using Azure Artifacts can eliminate the need to manage file shares or host 
    private package services and lets you share code easily by allowing you to store
    Maven,npm or NuGet packages togather 
    - Package feeds must be secured for access by authorized accounts, so only 
    verified and trusted packages are stored there and none should push packages to 
    a feed without the proper role and permissions
    - The package access should involve allowing:
        - Restricted access for consumption:
            - Whenever a particular audience should only consume a package feed and
            its packages, it's required to restrict its access 
            - Only those allowed access will consume the packages from the feed
        - Restricted access for publishing:
            - Secure access is required to restrict who can publish so feeds and 
            unauthorized or untrusted persons and accounts can't modify their packages
    - Azure Artifacts has four different roles for package feeds:
        - Reader:
            - Can list and restore (or install) packages from the feed
        - Collaborator:
            - Can save packages from upstream sources
        - Contributor:
            - Can push and unlist packages in the feed
        - Owner:
            - Has all available permissions for a package feed
    - While creating an Azure Artifacts feed, the Project Collection Build Service
    is given contributor rights by default
    - Any contributors to the team project are also contributors to the feed
    - Project Collection Admins and administrators of the team project, plus the 
    feed's creator are automatically made owners of the feed
    - The roles of these users and groups can be changed or removed
    - When creating a feed, you can choose whether the feed is visible to people in 
    your Azure Devops organization or only specific people
    
    - Examine Authentication:
        - The authentication from Azure Pipelines to Azure Artifacts feeds is taken 
        care of transparently and will be based upon the roles and their permissions
        for the build identity
        - Each package type has its way of handling the credentials and providing 
        access upon authentication 
        - For the build tasks in Azure Pipelines, you'll provide the credentials via
        a service connection

Implement a versioning Strategy:
    - Correct versioning becomes essential to maintaining a codebase to keep track
    of which piece of software is currently being used
    - Versioning is also relevant for dependency management, as it relates to the 
    versions of the packages and the components within
    - A published package is immutable
    - Replacing or updating an existing version of a package is not allowed and 
    most package feeds don't allow operations that would change a current version
    - Regardless of the size of the change, a package can only be updated by 
    introducing a new version
    - Versioning of Artifacts:
        - It is a proper Software Development practice to indicate changes to code
        with an increased version number
        - A package type might have its conventions for versioning and a particular
        versioning scheme
        - Most commonly, versioning involves three types of changes:
            - Major Changes:
                - Indicates that the package and its contents have changed significantly
                - It occurs during the introduction of a package
                - Major changes are not guaranteed to be compatible and usually 
                have breaking changes from older versions
                - Major changes might require a large amount of work to adopt the
                consuming codebase to the new version
            - Minor Change:
                - Indicates that the package and its contents have extensive
                modifications but are smaller than a major change
                - These changes can be backward compatible with the previous version,
                although they aren't guaranteed to be
            - Patch:
                - Indicates a flaw, bug or malfunctioning part of the component has
                been fixed
                - It is backward compatible version compared to the previous version
        - Semantic versioning uses a three-part version number and an extra label
        - A label can be any text describing the nature of the prerelease, ex:
            1.0.0-rc1
    - Examine Release Views:
        - Azure Artifacts recognizes the quality level of packages in its feeds and
        the difference between prerelease and release versions
        - It offers different views on the list of packages and their versions, 
        separating these based on their quality level
        - Feeds in Azure Artifacts have three different views by default:
            - Local:
                - @Local view contains all release and prerelease packages and the 
                packages downloaded from upstream sources
            - Prerelease:
                - @Prerelease view contains all packages that have a label in their
                version number
            - Release:
                - @Release view contains all packages that are considered official
                releases
    - Promote Packages:
        - Azure Artifacts has the notion of promoting packages to views to indicate
        that a version is of a certain quality level
        - Packages will always show in the Local view, but only in a particular view
        after being promoted

Introduction to Github Packages:
    - Github Packages is a software package hosting service that allows your packages,
    containers and other dependencies
    - It is a central place to provide integrated permissions management and billing
    for software development on GitHub
    - Github's container registry is optimized for containers and supports Docker
    and OCI images
    - It gives you the flexibility to control permissions and visibility for your 
    packages
    - You can publish packages in a public or private repository
    - You can integrate Github Packages with Github APIs, Github Actions and 
    Webhooks
    - Publishing a Package:
        - Create or use an existing Personal Access Token with the appropriate
        scopes for the task you want to accomplish
        - When you create a PAT, you can assign the tokens to different scopes 
        depending on your needs
        - Authenticate to Github Packages using your access token and the instructions
        for your package client
        - Publish the package using the instructions for your package client
    - Install a Package:
        - You can install any package you have permission to view from Github Packages
        and use the package as a dependency in your Project
        - You can search for packages globally across all of Github or within a 
        particular organization
        - After you find a package, read the package's installation and description
        instructions on the package page
    
    - Delete a Package:
        - Delete on Github if you have the required access:
            - An entire private package or a specific version of a private package
            - If there are not more than 5000 downloads of any version of the 
            package, an entire public package
    
    - Restoring a Deleted Package:
        - You restore the package within 30 days of its deletion
        - The same package namespace is still available and not used for a new package

    - Package Access Control and Visibility:
        - You can use granular permissions with the container registry (scoped to
        personal user or organization account)
        - GitHub.com does not support granular permissions in other package registries
        like the npm registry
        - You can change the package access control and visibility separately from the
        repository
        - You need to an admin to be able to delete a package. Other roles are read
        and writes