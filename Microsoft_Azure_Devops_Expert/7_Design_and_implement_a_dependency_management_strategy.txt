Explore Package Dependencies:
    - A team that is writing software won't write every piece of code by
    itself but use existing code written by other teams or companies and
    open-source code is readily available
    - Each component can have its maintainers, speed of change, and 
    distribution, giving both the creators and consumers of the components autonomy
    - A software engineer will need to identify the components that make
    up parts of the solution and decide whether to write the implementation
    or include an existing component, the later introduces a dependency 
    on other components
    - Without proper dependency management, it will be hard to keep the
    components in the solution controlled
    - Management of dependencies allows a software engineer and team to be
    more efficient working with dependencies
    
    - Elements of a dependency management strategy:
        - Standardization:
            - Managing dependencies benefit from a standardized way of declaring and
            resolving them in your codebase
            - It allows for a repeatable, predictable and usage that can be automated
            as well
        - Package Formats and sources:
            - The distribution of dependencies can be performed by a packaging method
            suited for your solution's dependency type
            - Each dependency is packaged using its usable format and stored in a 
            centralized source
        - Versioning:
            - While codebase grows and changes, you need to consider the changes in 
            your dependencies as well
            - It requires a versioning mechanism for the dependencies to be selective
            of the version of a dependency you want to use
    
    - A thorough investigation of your codebase is necessary to pinpoint sections
    of code that should be classified as dependencies 
    - This calls for modifying how you arrange your code and construct the solution
    - Source Componentization:
        - Focusses on source code
        - Refers to the splitting of the source code in the codebase into separate 
        parts and organizing it around the identified components
        - It works if the source code isn't shared outside of the project
    - Package Componentization:
        - Involves distribution of software components by utilizing packages as a formal
        way of wrapping and handling the components
        - A shift to packages adds characteristics needed for proper dependency 
        management, like tracking and versioning packages in your solution