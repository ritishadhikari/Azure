Introduction to Deployment Patterns:
    - Azure Pipelines can be used to create a fully featured cross-platform CI and 
    CD service
    - Microservices Architecture:
        - Interaction between the microservices is done asynchronously
        - They don't call each other directly, but use asynchronous mechanisms like
        queues or events
    - In classical deployment patterns, despite the different stages to test and
    validate, this approach still involves a lot of risks

Implement blue-green deployment and feature toggles:
    - Blue Green Deployment:
        - It is a technique that reduces risk and downtime by running two identical 
        environments which are called blue and green
        - Only one of the environments is live, with the live environment serving 
        all production traffic
        - Initially blue is live and green is idle
        - As you prepare a new version of your software, the deployment and final 
        testing stage occur in an environment that isn't live
        - Once you have deployed and thoroughly tested the software in green, switch
        the router or load balancer so all incoming requests go to green instead
        of blue
        - Green is now live and blue is idle
        - This technique can eliminate downtime because of app deployment
        - It reduces risk since if something unexpected happens with your new version
        on the green, you can immediately roll back to the last version by switching
        back to blue
        - When it involves database schema changes, your application and architecture
        should be built to handle both the old and the new database schema
    - Explore Deployment Slots:
        - When using Azure, doing blue-green deployments is relatively easy
        - You don't have to write your code or set up infrastructure
        - Use an out-of-the box feature called deployment slots when using web apps
        - They are a feature of Azure App Service and are live apps with hostnames
        - You can create different slots for your application (ex. dev, stage, test)
        - Production slot is the slot where your live app stays
        - Validate app changes in staging with deployment slots before swapping them
        with your production slot
        - You can use a deployment slot to set up a new version of your application 
        and when ready, swap the production environment with the new staging environment
        - The above is done by an internal swapping of the IP addresses of both slots
        - The swap eliminates downtime when you deploy your app with seamless traffic 
        redirection, and no requests are dropped because of swap operations
    
    - Introduction to Feature Toggles / Feature Flags:
        - It allows you to change how our system works without making significant 
        changes to the code
        - Only a small configuration change is required and in many cases, it will
        also only be for a few users
        - The other type of feature flag is called the release flag, wherein you change 
        the configuration so that canary users also have the feature flag set, and 
        they will start to test the new code as well. If any problem occurs, you can
        quickly disable the flag for them again
        - Another release flag might be used for AB testing where you would want to 
        find out if a new feature makes it faster for users to complete a task
        - You can then directly compare the outcome and decide if the feature is worth
        keeping 
        - Feature Toggles are great alternative to branching as well where you build
        new features behind a toggle
        - Your feature is off when a release occurs and should not be exposed to or
        impact the production software
        - Feature Flag should not be repurposed as reusing old flag leads to failures
        and increases technical debt
        - A plan for managing the lifecycle of feature flags is critical and as soon
        as you add a flag, you need to plan for when it will be removed

Implement Canary Releases and Dark Launching:
    - A canary release is a way to identify potential problems without exposing all your
    end users to the issue at once
    - By closely monitoring what happens when you enable the feature, you can get 
    relevant information from this set of users and either continue or rollback 
    (disable the feature)
    - If the canary release shows potential performance or scalability problems, you
    can build a fix for that and apply that in the canary environment
    - After the canary release has proven to be stable, you can move the canary release
    to the actual production environment
    - It can be implemented using a combination of feature toggles, traffic routing,
    and deployment slots
    - You can route a percentage of traffic to a deployment slot with the new feature
    enabled
    - You can target a specific user segment by using feature toggles
    - Examine TraffiC Manager:
        - If you want more control over the traffic that flows to your versions, 
        deployment slots aren't enough, which only enables you to swap between two
        different versions of your application quickly
        - To control traffic in Azure, you can use a component called Azure Traffic 
        Manager
        - Azure Traffic Manager is a DNS based traffic load balancer that enables you
        to distribute traffic optimally to services across global Azure regions 
        while providing high availability and responsiveness
        - It uses DNS to direct client requests to the most appropriate service endpoint
        based on a traffic-routing method and the health of the endpoints
        - Traffic Manager is resilient to failure, including the breakdown of an entire
        Azure region
    - Traffic Manager currently provides six options to distribute traffic:
        - Priority:
            - When you use a primary service endpoint for all traffic and provide 
            backups if the primary or the backup endpoints are available
        - Weighted:
            - Most used
            - When you want to distribute traffic across a set of endpoints, either 
            evenly or according to weights, which you define
        - Performance:
            - When you have endpoints in different geographic locations, and you want
            end users to use the closest endpoint for the lowest network latency
        - Geographic:
            - When users are directed to specific endpoints based on which geographic
            location their DNS query originates from
            - Ex. Where it is mandatory to follow data sovereignty, localization of
            content and user experience and measuring traffic from different regions
        - MultiValue:
            - When users only have IPv4/IPv6 addresses as endpoints
            - When a query is received for this profile, all healthy endpoints are 
            returned
        - Subnet:
            - Maps sets of end-user IP addresses to a specific endpoint within a traffic
            manager profile
            - The endpoint returned will be mapped for that request's source IP address
            when a request is received
    - Using a combination of feature toggles, deployment slots, and traffic manager, you
    can achieve complete control over the traffic flow and enable your canary release
    - Dark Launching:   
        - Dark launching is like canary releases
        - The difference here's that you'r looking to assess users' response to new
        features in your frontend rather than testing the performance of the backend
        - The idea is rather than launch a new feature for all users, you instead release
        it to small set of users
        - Usually these users are not aware they are being used as test users for the 
        new feature and often you don't even highlight the new feature to them, as 
        such as the term "Dark Launching"
        - Another ex. of dark launching is launching a new feature and using it on the
        backend to get metrics which SpaceX does 

Implement A/B Testing and Progressive exposure deployment:
    - A/B Testing:
        - A/B testing (also known as split testing or bucket testing) compares two 
        versions of an app against each other to determine which one does better
        - It is mainly an experiment where two or more page variants are shown
        to users at random
        - Statistical analysis is used to determine which variation works better
        for a given conversion goal
    - Progressive Exposure Deployment:
        - Progressive exposure deployment, also called ring-based deployment supports 
        the production-first devops mindset and limit the impact on end users while
        gradually deploying and validating changes in production
        - Impact (also called Blast Radius) is evaluated through observation, testing,
        analysis of telemetry and user feedback
        - In devops, rings are typically modelled as stages
        - With a ring based deployment, you first deploy your changes to risk-tolerant
        customers and progressively roll out to a more extensive set of customers
        - Some organizations that use canary releasing have multiple deployment slots
        set up as rings
        - The first release of the feature to ring 0 targets a well-known set of users,
        mostly their internal organization
        - After things have been proven stable in ring 0, they propagate the release to
        the next ring. It's with a limited set of users outside their organization
        - Finally the feature is released to everyone, and is often done by flipping the
        switch on the feature toggles in the software
        - Monitoring and health checks are essential, and by using post deployment
        release gates that check a ring for health, you can define an automatic
        propagation to the next ring after everything is stable
        - When a ring is not healthy, you can halt the deployment to the following rings
        to reduce the impact

Integrate with Identity Management Systems:
    - Integrate GitHub with single sign-on:
        - For Integration of Github with Single sign-on (SSO), you need to connect your
        identity provider at the organization level
        - Github offers both SAML and SCIM support
    - Explore Service Principals:
        - To access resources, an entity must be represented by a security principal
        - To connect, the entity must know:
            - TenantID
            - ApplicationID
            - ClientSecret
        - Applications are registered with a Microsoft Entra tenant within Microsoft
        Entra ID
        - Registering an application creates an identity configuration and determine
        who can use it:
            - Accounts in the same organizational directory
            - Accounts in any organizational directory
            - Accounts in any organizational directory and Personal Microsoft Accounts
            - Personal Microsoft Accounts
        - Once the application is created, you then should create at least one client
        secret for the application
        - The application identity can then be granted permssions within services 
        and resources that trust Microsoft Entra ID
    - Explore Managed Identity:
        - Many Azure Services expose their own identity 
        - It isn't an identity that you need to manage
        - Ex. you don't need to worry about password policies and so on
        - You can assign permissions to that identity as with any other Microsoft 
        Entra Identity
        - There are two types of Managed Identities:
            - System-assigned
            - User-assigned: 
                - You create a managed identity as an Azure Resource
                - It can then be assigned to one or more instances of a service

Manage Application Configuration Data:
    - Local configuration files limit the configuration to a single application, but
    sometimes it would be helpful to share configuration settings across multiple
    applications
    - It is challenging to manage changes to local configurations across multiple running
    instances of the application, especially in a cloud-hosted scenario
    - Explore of Separation of Concerns:
        - Configuration Custodian:
            - Responsible for generating and maintaining the life cycle of configuration
            values
            - Includes CRUD on keys, ensuring the security of secrets, regeneration 
            of keys and tokens, defining config settings of keys and tokens and
            defining log levels for each environment
            - Roles can be owned by operations engineer and security engineers while
            injecting config files through devops process and CI/CD implementation
            - They do not define the actual configuration but are the custodians of 
            their management
        - Configuration Consumer:
            - Responsible for defining the schema for the configuration that needs to be
            in place and then consuming the configuration values in the application or
            library code
            - The dev and the test teams should not be concerned about the value of keys
            but rather what the key's capability is
        - Configuration Store:
            - The underlying store used to store the configuration
            - While it can be a simple file, in a distributed application, it needs
            to be a reliable store that can work across environments
            - This store is responsible for persisting values that modify the 
            application's behavior per environment but aren't sensitive and don't require 
            any encryption or HSM modules
        - Secret Store:
            - Storing Configurations and Secrets togather violates the separation of 
            concern principle
            - Recommendation is to use a different store for persisting secrets
            - It allows a secure channel for sensitive configuration data such as 
            ConnectionStrings, also enables the operations team to have Credentials,
            Certificate, Token in one repository, and minimizes the security risk
            if the configuration store gets compromized
    
    - Understand External Configuration Store Patterns:
        - These patterns store the configuration information in an external location
        and provide an interface that can be used to quickly and efficiently update
        configuration settings
        - This type of external store depends on the hosting and runtime environment
        of the application
        - The backing store you chose for configuration information should have an 
        interface that provides consistent and easy-to-use access
        - It should expose the information in a correctly type and structured format
        - The implementation might also need to authorize users' access to protect 
        configuration data and be flexible enough to allow storage of multiple configu-
        ration versions (such as development, staging, or production, including many
        release versions of each one)
        - Many built-in configuration systems read the data when the application starts
        up and cache the data in memory to provide fast access and minimize the impact
        on application performance
        - Configuration settings are shared between multiple applications and application
        instances, or where a standard configuration must be enforced across various 
        applications and application instances
        - A standard config system does not support all the required configuration 
        settings, such as storing images or complex data types
    
    - Azure App Configuration (AAC):
        - It is a service for central management of application settings and feature 
        flags
        - While modern programs includes distributed components, each that needs its
        settings, distributed configuration settings can lead to hard-to-troubleshoot
        deployment errors
        - AAC service stores all the settings for your application and secures their
        access in one place
        - AAC configuration complements Azure Key Vault, which is used to store 
        application secrets 
        - AAC provides Centralized Management and distribution of heirarchical 
        configuration data for different environments and geographies
        - Dynamically change application settings without the need to redeploy or restart
        an application
        - AAC is a fully managed service that can be set up in minutes 
        - Provides flexible key representations and mappings and tagging with labels
        - AAC also provided complete data encryptions, at rest or in transit with
        enhanced security through Azure Managed Identities
        - The easiest way to add an App configuration store to your application is through
        one of Microsoft's client libraries

    - Examine Key Value Pairs:
        - Azure App Configuration stores configuration data as key-value Pairs
        - Keys are used to store and retrieve corresponding values
        - It's common to organize keys into a hierarchical namespace by using a character
        delimeter, such as / or : ; You can also use a flat convention
        - Use a convention that's best suited for your application
        - App configuration treats keys as a whole and does not parse keys to figure out
        how their names are structured or enforce any rule on them
        - Key stored in App configuration are case sensitive, Unicode based strings
        - Keep in mind some frameworks handle configuration keys case-insensitively
        - '*',',','\' are reserved and you can use any Unicode character in key names
        except for those reserved characters (use \ for using reserved character)
        - There's a combined size limit of 10,000 characters on a key-value pair and 
        this limit includes all characters in the key, its value, and all associated
        optional attributes
        - Key values in App configuration can optionally have a label attribute, where
        labels are used to differentiate key values with the same key
        - A key app1 with labels A and B forms two separate keys in an App Configuration
        store; Use labels for the same key to specify multiple environments
        - By default label for a key value is empty or null 
        - Values assigned to keys are also Unicode strings and you can use all Unicode
        characters for values
        - Configuration data stored in an App Configuration store, which includes all
        keys and values is encrypted at rest and in transit
        - App configuration isn't a replacement solution for Azure Key Vault and do 
        not store application secrets in it
    
    - Examine App Configuration Feature Management:
        - It is a modern software development practice that decouples feature release
        from code deployment and enables quick changes to feature availability on demand
        - APC service can be used to store and manage feature flags 
        - Terms related to feature management:
            - Feature Flag:
                - Variable with a binary state on or off
                - It also has an associated code block
                - State of the feature flag triggers whether the code block runs or not
            - Feature Manager:
                - Application package that handles the lifecycle of all the feature flags
                in an application
                - Typically provides more functionality, such as caching feature flags 
                and updating their states
            - Filter:
                - Rule for evaluating the state of a feature flag
                - Ex: User group, device, browser type, geographic location, time window
        - Effective implementation of feature management consists of atleast two 
        components working in concert:
            - An application that makes use of feature flags
            - A separate repository that stores the feature flags and their current states
        - Each Feature flag has two parts: a name and a list of one or more filters 
        used to evaluate if a feature's state is on (value is true)
        - When a feature flag has multiple filters, the filter list is traversed until
        one of the filters determines the feature should be enabled and at that moment,
        the feature flag is ON, and any other remaining filter results are skipped
        - If no filter indicates the feature should be enabled, the feature flag is 
        off
        - Azure App Configuration is designed to be a centralized repository for feature
        flags and you can use it to define different kinds of feature flags and manipulate
        their states quickly and confidently
        - Use App Configuration Libraries for programming languages to easily access these
        feaure flags from your application
    - Integrate Azure Key Vault with Azure Pipelines:
        - Azure Key vault allows you to manage your organization's secrets and 
        certificates in a centralized repository
        - Secrets can include:
            - Connection Strings
            - Password
            - Certificates
            - Tokens (which if leaked to unauthorized users can lead to security breach)
        - The secrets and keys are further protected by Hardware Security Modules (HSMs)
        - It also provides versioning of secrets, full traceability and efficient 
        permission management with access policies
        - It solves the following problems:
            - Secrets Management:
            - Key Management
            - Certificate Management:
                - Provision, manage and deploy public and private Secure Sockets Layer/
                Transport Layer Security  (SSL/TLS) certificates for use with Azure
        - Your applications can securely access the information they need by using URIs
        that allow them to retrieve specific versions of a secret after the application's
        key or secret is stored in Azure Key Vault
        - You do not have to write custom code to protect any of the secret information
        - Access to a key vault requires proper authentication and authorization before
        a caller (user or application) can get access
        - Azure Key Vault is designed so that Microsoft does not see or extract your data 
        - After creating a couple of Key Vaults, you will want to monitor how and when 
        your keys and secrets are accessed, and you can do it by enabling logging for
        key vault
        - Archive those logs to storage account or Stream to Event Hubs or Send the logs
        to Log Analytics
        - You may secure your logs by restricting access, and you may also delete logs
        that you no longer need
        - Security Information in Azure Key vault must be highly available; replicating
        the contents of your Key Vault within a region and to a secondary region
        - It can also scale up on short notice to meet organization's usage spikes
        - Azure Key Vaults allows you to segregate application secrets and applications
        may access only the vault they can access and they can do only specific
        operations
        - Create an Azure Key Vault per application and restrict the secrets stored in
        a key vault to a particular application and team of developers
        - Docker, Kubernetes and Key Vaults forms the outer loop in Devops where the 
        inner loop is focussed on the developer teams iterating over their solution
        development and they consume the configuration published by the outer loop
        - The ops engineer governs the configuration management and push changes into
        Azure KeyVault and Kubernetes that are further isolated per environment