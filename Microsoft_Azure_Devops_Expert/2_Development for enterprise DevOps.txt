Structure your Git Repo:
    - A repository is where your work history is stored, usually in a git
    repository
    - Monorepos:
        - It'a s source control pattern where all source code is kept in 
        one repository
        - Give all employees access to everything at once
        - The hassle of making changes in other repos or waiting for teams to make 
        changes for you is avoided in a mono repo where anyone can change anything
        - Managing complex dependency graphs can increase the difficulty of using a 
        single repository
    - Multiple Repositories:
        - Organizing your project into multiple repositories
        - It allows each subteam to work in their respective areas using the libraries,
        tools, and development workflows that optimize their productivity
        - In Azure Devops, it's common to use a separate repository for each associated
        solution within a project
    - The fundamental difference between the monorepo and multiple repos philosophies
    boils down to a difference about what will allow teams working togather on a system
    to go faster
    - Preference is always to avoid dumping log entries into a changelog. 
        # git log [options] vxx | helper-script>projectchangelogs/x.x.Y
    - With logging, the typical breakdown is to separate a list of versions and then
    within each version show:
        - Added Features
        - Modified/Improved Features
        - Deleted Features
    - One common tool to create a changelog is gitchangelog, which is based on python

    Manage Git branches and workflows:
        - Trunk Based Development:
            - It is a logical extension of centralized workflow
            - The core idea is that all feature development should take place 
            in a dedicated branch instead of a main branch
            - This encapsulation makes it easy for multiple developers to work 
            on a particular feature without disturbing the main codebase
            - It should also mean that the main branch should never contain 
            broken code, which then becomes a huge advantage for Continous
            integration environments.
        - Forking Workflow:
            - Instead of using a single server-side repository to act as the 
            "central" codebase, it gives every developer a server-side repository
            - Each contributor has two Git Repositories:
                - A private local one
                - A public server-side one

        - Pull Requests:  
            - Pull requests make it incredibly easy for your team to comment on each 
            other's work 
            - It allows sharing a feature with other developers without touching
            any official code
            - Create a pull request during the development process when:
                - You have little or no code but want to share screenshots or 
                general ideas
                - You are stuck and need some help or advice
                - You are ready for someone to review your work
                - If you are using a Fork and Pull Model, pull requests provide a 
                way to notify project maintainers about the changes you would like
                them to consider
                - If you are using a shared repository model, Pull requests help 
                start code review and conversion about proposed changes before they 
                are merged into the main branch
        
        - Feature branches should have descriptive names which gives a clear,
        highly focussed purpose

        - Anything on the main branch is always deployable
        - Each commit is considered a separate unit of change, which lets you 
        roll back changes if a bug is found or you decide to head in a different 
        direction
        - 
