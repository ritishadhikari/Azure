Structure your Git Repo:
    - A repository is where your work history is stored, usually in a git
    repository
    - Monorepos:
        - It'a s source control pattern where all source code is kept in 
        one repository
        - Give all employees access to everything at once
        - The hassle of making changes in other repos or waiting for teams to make 
        changes for you is avoided in a mono repo where anyone can change anything
        - Managing complex dependency graphs can increase the difficulty of using a 
        single repository
    - Multiple Repositories:
        - Organizing your project into multiple repositories
        - It allows each subteam to work in their respective areas using the libraries,
        tools, and development workflows that optimize their productivity
        - In Azure Devops, it's common to use a separate repository for each associated
        solution within a project
    - The fundamental difference between the monorepo and multiple repos philosophies
    boils down to a difference about what will allow teams working togather on a system
    to go faster
    - Preference is always to avoid dumping log entries into a changelog. 
        # git log [options] vxx | helper-script>projectchangelogs/x.x.Y
    - With logging, the typical breakdown is to separate a list of versions and then
    within each version show:
        - Added Features
        - Modified/Improved Features
        - Deleted Features
    - One common tool to create a changelog is gitchangelog, which is based on python

    Manage Git branches and workflows:
        - Trunk Based Development:
            - It is a logical extension of centralized workflow
            - The core idea is that all feature development should take place 
            in a dedicated branch instead of a main branch
            - This encapsulation makes it easy for multiple developers to work 
            on a particular feature without disturbing the main codebase
            - It should also mean that the main branch should never contain 
            broken code, which then becomes a huge advantage for Continous
            integration environments.
        - Forking Workflow:
            - Instead of using a single server-side repository to act as the 
            "central" codebase, it gives every developer a server-side repository
            - Each contributor has two Git Repositories:
                - A private local one
                - A public server-side one

        - Pull Requests:  
            - Pull requests make it incredibly easy for your team to comment on each 
            other's work 
            - It allows sharing a feature with other developers without touching
            any official code
            - Create a pull request during the development process when:
                - You have little or no code but want to share screenshots or 
                general ideas
                - You are stuck and need some help or advice
                - You are ready for someone to review your work
                - If you are using a Fork and Pull Model, pull requests provide a 
                way to notify project maintainers about the changes you would like
                them to consider
                - If you are using a shared repository model, Pull requests help 
                start code review and conversion about proposed changes before they 
                are merged into the main branch
                - Once a pull request is merged with a main and feature, Pull request
                preserves a record of the historical changes to your code.
                - Because the historical information is searchable, they let anyone go
                back in time to understand why and how a decision was made
            
        
        - Feature branches should have descriptive names which gives a clear,
        highly focussed purpose

        - Anything on the main branch is always deployable
        - Each commit is considered a separate unit of change, which lets you 
        roll back changes if a bug is found or you decide to head in a different 
        direction
    
    - The Main Branch:
        - Any changes to the main branch flow through pull requests only
        - Tag all releases in the main branch with Git tags
    
    - The Feature Branch:
        - Changes from feature branches to the main only flow through pull requests
        - Name your feature to reflect its purpose

    - Azure CLI:
        - Command Line Interface for Azure
    - Azure Devops CLI:
        - Extension of Azure CLI for working with Azure Devops and Azure Devops Server
        designed to seamlessly integrate with Git, CI Pipelines and Agile tools
        - Contribute to your projects without leaving the command line
        - Works on Windows, Linux and Mac
        - Supports returning the query results in JSON, JSONC, YAML, YAMLC, table, TSV
        and None
    - Git Pull Request Merge Conflict:
        - Open source extension created by Azure Devops
        - Allows you to review and resolve the pull request merge conflicts on the web
        - Any conflicts with the target branch must be resolved before a Git Pull 
        request can complete
        - Resolve conflicts on the web as part of the pull request merge instead of
        doing the merge and resolving conflicts in a local clone
    
    - Pull request using the Azure Devops CLI:
        """
            az repos pr create --title "Review Feature-1 before merging to main"
            --work-items 38 39 --description "#Merge feature-1 to main"
            --source-branch feature/MyFeture-1 --target-branch main
            --repository myWebApp --open
        """ 
        - --open means open it in a web browser after it has been created
        - --deletesource-branch means delete the branch after the pull request is 
        complete
        - --auto-complete means complete automatically when all policies have passed
        and the source branch can be merged into the target branch
    
    - A Lean branching Model allows you to create short-lived branches and push quality 
    changes to production faster

    - Github Flow:
        - It is a branch based workflow suggested for Github
        - There are other Pull requests configurations, such as automatically requesting
        a review from specific teams or users when a pull request is created or checks
        to run on pull requests
    
    - Explore Fork Workflow:
        - Instead of using a single server-side repository to act as the central 
        codebase, it gives every developer their server-side repository
        - This kind of workflow is most often seen in public open-source project
        - Developers push to their server side repositories and only the project
        maintainer can push to the official repository
        - It allows the maintainer to accept commits from any developer without
        giving them written access to the official codebase
        - Forked repositories are generally server-side clones managed by a git service
        provider such as Azure Repos
        - There's no unique Git Command to create forked repositories

    - We can set up branch policies to restrict direct commit into a particular branch
    and it encourages pull requests
    - Linking a Work Item with a Pull request:
        - Set up branch policies. and enable link work linking option
        - Create a Work Item as to do
        - Once commit happens in a feature branch, create a pull request
        - In the warning message that comes next, in the link work item section,
        link the work item that was created
        - Once the pull request is merges with the main branch, the work item moves
        to the done state.

Collaborate with pull requests in Azure Repos:
    - Start code review and general discussion about a set of changes before being merged
    into the main branch
    - Pull requests combine the review and merge of your code into a single collaborative
    process
    - Use Pull requests to review works in progress and get early feedback on Changes
    - There's no commitment to merge the changes as the owner can abandon the pull
    request at any time
    - Cross-Polinate expertise and spread problem-solving strategies by using a wide
    range of reviewers in your code reviews
    - When assigning reviewers to your pull request, make sure you select the right 
    set of reviewers
    - Reviewers should try to provide feedback on changes they disagree with; Identify
    issues and give a specific suggestion on what you would do differently
    - Add more conditions to your pull requests to enforce a higher level of code quality
    in your key branches
    - Branch policies give you a set of out-of-the-box policies that can be applied 
    to the branches on the server.
    - Chose to create a new branch from a work item, that work item automatically gets 
    linked to the branch
    - You can optionally include more than one work item with a branch as part of the
    create workflow
    - The new pull request form supports markdown, so you can add the description 
    using the markdown syntax
    
    - Under the pull requests tab:
        - Overview page summarizes the changes and the status of the policies. The 
        comments supports both @ for mentions and # to link work items, and the text
        supports markdown syntax
        - Files tab shows a list of changes and the difference between the previous
        and the current versions
        - Any updates pushed to the code files will show up in the updates tab
        - List of all commits is shown under the Commits tab
    - You can also mark the pull request to autocomplete after your review. It 
    autocompletes the pull requests once all the policies have been successfully 
    completed
    
    - Recreating Deleted Branches:
        - Deleted branches are only shown if you search for them by their exact name
        to cut out the noise from the search results
        - If a match is found, you'll see who deleted it and when. You can also restore
        the branch
        - Restoring the branch will recreate it at the commit to which is last pointed, 
        however it won't restore policies and permissions

    - Github Mobile for pull request approvals:
        - Using a mobile app in combination with git is a convenient option, particularly
        when urgent pull request approvals are required
        - The app can render markdowns, images, and PDF files directly on the mobile
        device
        - Pull requests can be managed within the app, along with marking files as 
        viewed, collapsing files
        - comments can be added and emoji short codes are rendered

Identify Technical Debt:
    - The five key traits to measure for higher quality are:
        - Reliability:
            - Measures the probability that a system will run without failure over a 
            specific period of operation
            - Low defect counts are crucial for developing a reliable codebase
        - Maintainability:
            - Measures how easily software can be maintained 
            - Relates to the codebase's size, consistency, structure and complexity
            - Both automation and human reviewers are essential for developing 
            maintainable codebases
        - Testability:
            - Measures how well the software supports testing efforts
            - Relies on how well you can control, observe, isolate and automate
            testing among other factors
            - Can be measured based on how many test cases you need to find potential
            faults in the system
            - Applying methods at the code level - such as cyclomatic complexity, 
            can help improve the testability of the component
        - Portability:
            - Measures how usable the same software is in different environments
            - Relates to platform independence
            - Regularize test code on different platforms rather than waiting 
            until the end of development
            - Use atleast two compilers and enforce coding standards
        - Reusability:
            - Measures whether existing assets - such as code - can be used again
            - Assets are easily reused if they have modularity or loose coupling 
            characteristics
    
    - Common quality related metrics:
        - Failed Build Percentage:  
            - Overall, what percentage of builds are failing
        - Failed Deployment Percentage:
            - Overall, what percentage of deployments are failing
        - Ticket Volume:
            - What is the overall volume of customers or bug tickets
        - Bug Bounce Percentage:
            - What percentage of customer or bug tickets are opened
        - Unplanned work percentage:
            - What percentage of the overall work is unplanned
    
    - Technical Debt:
        - Describes the future cost that will be incurred by choosing an easy solution
        today instead of better practice because they would take longer to complete
        - The most common excuse is tight deadlines
        - Minimize the constant acquisition of technical debt using automated testing
        and assessment
        - One of the tool to access the debt is sonarCloud
        - Azure Devops can be integrated with a wide range of existing tooling used to
        check quality during builds
        - To find other code quality tools that are easy to integrate with Azure 
        Devops, search for the word Quality when adding a task into your pipeline  

Explore Githooks:
    - We cannot be continously delivering, if we do not have a quality
    codebase
    - Git lets you automate most of the checks in your codebase
    - Githooks are a mechanism that allows code to be run before or after
    certain Git lifecycle events
    - The hooks can be any executable code, including shell, Powershell,
    Python or other scripts, or any binary executibles
    - Hooks must be stored in .git/hooks folder in the repo root
    - Examples where Hooks are useful:
        - In enforcing preconditions for merging
        - Verifying work item ID association in your commit message
        - Preventing you and your team from committing faulty code
        - Sending notifications to your team's chatroom
    - To use a specific file:
        - Remove the .sample from any of the file's name residing
        under the .git/hooks folder
        - If you are using windows, then replace the first line - 
        #!/bin/sh with !#C:/Program\Files/Git/usr/bin/sh.exe
    - If you need to overwrite the git hooks you have set up on the 
    client-side, you can do so by using the no-verify switch
        """
            git commit --no-verify
        """
    - Azure Repos also exposes server-side hooks and Azure Devops uses
    the exact mechanism itself to create Pull requests

Plan Foster Inner Source:
    - Fork workflow is just not for open source, as it also help support
    inner source workflows within your company
    - Inner Source, also called Internal Open Source, brings all the 
    benefits of open-source software development inside your firewall
    - By moving to offer inner sources throughout the company, powered by Azure
    Repos, it's easy to fork a repository to contribute back
    - When you create a Fork, none of the permissions, policies, or build
    pipelines are applied
    
    - Sharing Code between Forks:
        - You can create PRs in either direction: from fork to upstream
        or upstream to fork
        - The most common approach will be from fork to upstream
        - The destination repository's permissions, policies, builds, and work
        items will apply to the PR
    
    - Everyone should work in a topic branch and the main should be protected
    with branch policies
    - Forking workflow is recommended if your repository has many casual or 
    infrequent committees (like an open source project)
    
    - Sync your Fork to the latest:
        - When you have gotten your PR accepted into upstream, you will want
        to make sure your fork reflects the latest state of the repo
        - Rebase on the Upstream's main branch 
        """
                git fetch upstream main
                git rebase upstream/main
                git push origin
        """
    
    - After a fork has been created, the newly created files, folders and branches
    aren't shared between the repositories unless you start a pull request

Manage Git repositories:
    - There are two primary causes for large repositories:
        - Long History
        - Large Binary Files
    
    - Shallow Clone:
        - If developers don't need all the available history in their local repositories,
        a good option is to implement a shallow clone
        - It saves both space on local development systems and the time it takes to 
        sync
        - You can specify the depth of the clone that you want to execute
            """
                git clone --depth [depth] [clone-url]
            """
        
    - VFS for Git:
        - VFS for Git helps with large repositories
        - It requires a Git LFS client
        - Git LFS works with the standard filesystem to download necessary files
        in the background when you need files from the server
        - The protocol is a straightforward one with four endpoints similar to REST
        endpoints
        - If Azure Repos hosts your repository, you can clone a repository using the 
        GVFS protocol
    
    - Scalar 
        - It is a .NET Core Application available for Windows and MacOS, which microsoft
    uses it for Windows and Office Repositories
        - Achieves very large repository handling with:
            - Partial Clone
            - Background Prefetch
            - Sparse-Checkout
            - File System Monitor
            - Commit Graph: Speeds up commit walks for Git log
            - Multi Pack Index: Fast object lookups across many files
            - Incremental Repack
    
    - Purge Repository Data:
        - Purging is required as:
            - It significantly reduce the size of a repository by removing history
            - Remove a large file that was accidentally uploaded
            - Remove a sensitive file that should not have been uploaded
    
    - git filter repo tool:
        - It is a tool for rewriting history
        - Its core filter repo contains a library for creating history rewriting tool
        - Users with specialized needs can quickly create entirely new history rewriting
        tools
    
    - BFG Repo Cleaner:
        - It is commonly used open-source tool for deleting or fixing content in 
        repositories
        """
         bfg --delete-files extra.txt
         bfg --replace-text passwords.txt
        """
    
    - Managing Releases with Github Repos:
        - Releases in Github are based on Git tags
        - To create a release, use the gh release create command
        """
            gh release create tag
        """
        - Create a prerelease with the specified title and notes
        """
            gh release create v1.2.1 --title
        """
        - If you @mention any github users in the notes, the published release on 
        github.com will include a Contributors section with an avatar list of all the
        mentioned users
        - Delete a release  by replacing the tag with the release tag to delete and use
        the -y flag to skip confirmation
            """
                gh release delete tag -y
            """
        - 