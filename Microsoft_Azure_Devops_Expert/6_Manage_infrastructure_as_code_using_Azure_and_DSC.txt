Explore Infrastructure as Code and Configuration Management:
    - Infrastructure as code is the concept of managing your operations environment like
    we do for applications or other code for general release
    - IaaC provides consistent environments from release to release and across
    development, test and production environments
    - It allows configurations to be version controlled and automates scale-up and 
    scale-out process
    - Allows blue/green deployments
    - The operations insfrastructure is managed using the same rules and structures 
    that governs the creation and management of your infrastructure
    - Infrastructure is treated the same way that any other code would be
    - An easier way to remove the possibility of human error when initializing machines
    is to use Infrastructure as Code
    - In Infrastructure terms, there might be severe implications with a manual 
    deployment approach if a single machine crashes and you need to replace it
    - But if you adopt IaaC approach, you can more easily provision another machine 
    without adversely impacting your entire infrastructure, if a single machine goes down
    - Implementing Infrastructure as a Code:
        - With IaaC, you capture your environments in a text file (script/definition)
        - Your file might include any networks, servers and other computing resources
        - You can check the script or definition file into version control and then use
        it as the source for updating existing environments or creating new ones
        - For ex., you can add a new server by editing the text file and running the 
        release pipeline rather than remoting it into the environment and manually 
        provisioning a new server
    - IaaC treats infrastructure as a flexible resource that can be provisioned, 
    de-provisioned and reprovisioned as and when needed
    - Declarative Configuration:
        - Declarative or Functional configuration approach states what the final state
        state should be 
        - When run, the script or definition will initialize or configure the machine
        to have the finished state declared without defining how that final state
        should be achieved
        - Azure Resource Manager Template files are an example of a declarative 
        automation approach
    - Imperative Configuration:
        - Imperative or Procedural script states the how for the final state of the 
        machine by executing the steps to get to the finished state
        - It defines what the final state needs to be but also includes how to achieve 
        that final state
        - It also can consist of coding concepts such as for, *if-then, loops and 
        matrices
    - Idempotent Configuration:
        - It is a mathematical term that can be used in IaaC and Configuration as
        Code
        - It refers to application of one or more operations against a resource, 
        resulting in the same outcome
        - Ex. if you apply a deployment to a set of resources 1000 times, you should 
        end up with the same result after each application of the script or template
        - It is a best practice to build the scripts and templates in such a way as to
        embrace idempotency
        - Achieve idempotency by:
            - Automatically configuring and reconfiguring an existing set of resources
            - Discarding the existing resources and recreating a new environment

 Create Azure Resources using Azure Resource Manager Templates:
    - Azure Resource Manager Templates:
        - The Azure Resource Manager takes care of the entire deployment for you
        - Templates help express complex deployments and ARM maps out each resource and
        its dependent resources and creates dependent resources first, which helps 
        ensure that the deployment is carried out in the correct order
        - ARM ensures that deployment happens the same way every time
        - Templates are IaaC which can be shared, tested, and versioned like any
        other piece of software and most users maintain their templates under revision
        control, ex. git which records how the templates have evolved
        - Templates promotes reuse and also enables you to create multiple versions 
        of your infrastructure, such as staging and production while using the 
        same template
        - Templates are linkable and you can write small modular templates that defines
        a solution and then combine them to create a complete system
    - Template Components:
        - Resource Manager templates are written in JSON, which allows you to express 
        data stored as an object (ex. VM) in text 
        - Parameters:
            - In this section you specify which values are configurable when the 
            template runs
            - Ex. You might allow template users to set a username, password, or
            domain name
        - Variables:
            - Define values that are used throughout the template
            - It can make your templates easier to maintain
            - Ex. Define a storage account name one time as a variable and then use 
            that variable throughout the template
            - If the storage account name changes, you need only update the variable 
            once  
        - Functions:
            - You define procedures that you don't want to repeat throughout the 
            template
        - Resources:
            - Define Azure Resources that make up your deployment
        - Outputs:
            - Define any information you would like to receive when the template runs
    - Manage Dependencies:
        - For a given resource, other resources might need to exist before you can
        deploy the resource
        - Ex. a Microsoft Server must exist before attempting to deploy a SQL Database
        - Define a dependency with the dependsOn element or by using the reference
        function
        - Resource Manager evaluates the dependencies between resources and deploys
        them in their dependent order
        - When resources aren't dependent on each other, the Resource Manager deploys
        them in parallel
        - You only need to define dependencies for resources that are deployed in the
        same template
        - A circular dependency is a problem with dependency sequencing, resulting in
        the deployment going around in a loop and unable to continue and as a result
        the Resource Manager can't deploy the resources
        - Resource Manager identifies circular dependencies during template validation
        - If removing dependencies doesn't resolve the issue, you can move some 
        deployment operations into child resources that are deployed after the resources
        with the circular dependency
    - Modularize Template:
        - When using ARM templates, it's best to modularize them into individual
        components
        - The primary methodology to use is by using linked templates which allows
        you to break the solution into targeted components and reuse those various
        elements across different deployments
        - You can also nest a template within the main template, use the template 
        property and specify the template syntax
        - Nesting templates may result in a sizeable main file as all the elements 
        are within a single file
        - You can't use paramaters or variables defined within the nested templates
        and you can only use parameters and variables from the main template
        - The properties you provide for the deployment resource will vary based on
        linking to an external template or nesting an inline template within the main
        template
        - There are three options for deployment modes using templates:
            - validate:
                - Compiles the templates, validates the deployment
                - Ensures the template is functional (no circular dependencies) and
                correct syntax
            - incremental:
                - It is the default mode
                - It only deploys whatever is defined in the template 
                - It does not remove or modify any resources that are not defined in
                the template
                - You can only use incremental deployment mode for both linked and
                nested templates
            - complete:
                - Resoure Manager deletes resources that exist in the resource group
                but isn't specified in the template
                - Ex. Only resources defined in the template will be present in the
                resource group after the template deploys
                - Use this mode for production deployments to achieve idempotency
                in your deployment templates
        - As a best practice, use one resource group per deployment
        - External Template:
            - To link to an external template and paramater file, use templateLink
            and parametersLink
            - When linking to a template, ensure that the resource manager service
            can access it
            - You can't specify a local file or a file only available on your local
            network
            - You can only provide URI value includes HTTP or HTTPS
            - One option is to place your linked template in a storage account and
            use the URI for that item
            - Although linked template must be available externally, it does not
            need to be made available to the public
            - Instead you can add your template to a private account accessible to
            only the storage account owner, creating shared access signature (SAS)
            tokens to enable access during deployments
            - You add that SAS token to the URI for the linked template
            - To limit the exposure, you can set an expiration date for the token
    - Manage Secrets in Templates:
        - When passing a secure Value (such as a password) as a parameter during
        deployment, you can retrieve the value from an Azure Key Vault
        - Reference the Key Vault and secret in your parameter file
        - The value is never exposed because you only reference its Key Vault ID
        - The key-vault can exist in a different subscription than the resource
        group you're deploying it to
        - To access the secrets inside the key vault, from a resource manager 
        deployment, the key vault property enabledForDeployment must be True
        - Other than setting the key vault property enabledForDeployment to True, 
        the user deploying the template must have permission for the Key Vault Scope
        - If you create the key vault, you are the owner, so you inherently have the
        permission, however if the Key Vault is under a different subscription, 
        the owner of the Key Vault must grant access
        - The Key Vault is referenced in the parameter file and not the template
        - You would need to deploy the template and pass the parameter file to the 
        template
        """
            keyVaultName="name of key vault"
            resourceGroupName="resource group name"
            location="central us",
            userPrincipalName="email address associated with subscription"

            # Create a Resource group
            az group create --name $resourceGroupName --location $location

            # Create a Key Vault
            az keyvault create \
                --name $keyVaultName \
                --resouurce-group $resourceGroupName \
                --location $location \
                --enabled-for-template-deployment true
            
            az keyvault set-policy -upn $userPrincipalName --name $keyVaultName \
            --secret-permissions set delete get list

            # Create a secret with the name, vmAdminPassword
            password=$(openssl rand -base64 32)
            echo $password
            az keyvault secret \
            set --vault-name $keyVaultName \
            --name 'vmAdminPassword' \
            --value $password

        """
Create Azure Resources by using Azure CLI:
    - You can use Azure CLI interactively or through scripts:
        - Interactive:
            - For Windows OS, launch a shell such as cmd.exe or for linux or macOS,
            use bash. Then issue command at the shell prompt
        - Scripted:
            - Assemble the Azure CLI commands into a shell script using the script
            syntax of your chosen shell, and then execute the script
    - Commands in the CLI are structured in groups and subgroups
        - Each group represents a service provided by Azure, and the subgroups divide
        commands for these services into logical groupings
    - To find the commands you need, one easy way is to use the az find command
    """
        az find blob
    """ 
    - If you know the command's name you want, the help argument for that command will
    get you more detailed information on the command - also, a list of the available
    subcommands for a command group

    """
        az storage blob --help
    """

    - Azure authentication is used before you can execute Azure commands
    """
        az login
    """

    - You will often need to create a new resource group before you create a new 
    Azure Service which is done through Azure CLI
    - Name of the resource group is unique
    """
        az group create --name <name> --location <location>
    """
    - Azure CLI provides a list subcommand to get resource details
    """
        az group list
        az group list --output=table
    """

    - If you have several items in the group list, you can filter the return values by
    adding a query option
    """
       az group list --query="[?name == 'storage_account_learn']" --output=table
       az group list --query="[?location == 'centralindia']" --output=table
    """

Explore Azure Automation with Devops:
    - Azure Automation 
        - It is an Azure Service that provides a way for users to automate 
    the manual, long running, error-prone, and frequently repeated tasks commonly 
    done in a cloud and enterprise environment
        - You can save time and increase the reliability of regular administrative 
        tasks
        - You can even schedule the tasks to be executed automatically at regular 
        intervals
        - You can automate processes using runbooks or automate configuration management
        by using Desired State
        - To start using the Microsoft Azure Automation service, you must create an 
        Automation Account from within the Azure portal
        - Automation accounts are like Azure Storage Accounts, serving as a container
        to store automation artifacts which could be a container for all your runbooks,
        runbook executions (jobs), and the assets on which your runbooks depend
        - An Automation account allows you to manage all Azure resources via an API
        and to safeguard it, the Automation account creation requires subscription-owner
        access
        - You will need atleast one Azure Automation account to use Azure Automation
        - You can have upto 30 Automation Accounts (development, production, on-prem
        environment, etc) so that you may create multiple automation accounts to 
        seggrage and limit the scope of access and minimize any risk to your organization
    - RunBooks:
        - They serve as repositories for your custom scripts and workflows
        - They also typically reference Automation shared resources such as credentials,
        variables, connections and certificates
        - Runbooks can also contain other runbooks, allowing you to build more complex
        workflows
        - You can invoke and run runbooks on-demand or according to a schedule using
        Automation Schedule assets
        - When creating runbooks, you have two options:
            - Create your runbook and import it
            - Modify runbooks from the runbook gallery
        - If you prefer to work directly with Windows Powershell code, you can use a 
        powershell runbook or a powershell workflow runbook, the later use parallel
        processing to allow for the simultaneous completion of multiple tasks
        - If you prefer to edit a runbook without the exposure to the underlying code, 
        you can create a graphical runbook using the Azure portal's graphic editor
        - You can also use a Python runbook in Azure Automation and use python libraries
    - Automation Shared Resources:
        - Shared resources are globally available to be associated with or used in a 
        runbook
        - As a best practice, always try to create global assets to be used across your
        notebooks as it will save time and reduce the number of manual edits within 
        individual runbooks
        - There are eight shared resources categories:
            - Schedules:
                - Allows you to define a one-off or recurring schedule
            - Modules:
                - Contains Azure Powershell Modules
            - Modules Gallery:
                - Allows you to identify and import Powershell modules into your 
                Azure automation account
            - Python Packages:
                - Allows you to import a Python Package by uploading .whl or tar.gz
                packages
            - Credentials:
                - It allows you to create username and password credentials
            - Connections:
                - Allows you to specify Azure, Azure classic certificate, or Azure 
                Service Principal connections
            - Certificates:
                - It allows you to upload certificates in .cer or pfx format
            - Variables:
                - Allows you to define encrypted or unencrypted variables of types -
                string, boolean, datetime, integer or no specific type
    - Webhook:
        - You can automate starting a runbook either by scheduling it or by using a 
        Webhook
        - Webhook allows you to start a particular runbook in Azure Automation through 
        a single HTTPS request
        - It allows external services such as Azure DevOps, Github or custom applications
        to start runbooks without implementing more complex solutions using the Azure
        Automation API
        - Each Webhook has an expiration date, at which time it can no longer be used and
        you can continue to modify the date after creating the webhook providing the 
        webhook isn't expired
        - The webhook URL is the unique address that a client calls with an HTTP POST
        to start the runbook linked to the webhook and you can't specify a custom url
        - If the runbook has mandatory parameters, you'll need to provide these required
        parameters during creation and you will not be able to create the webhook unless
        values are provided
        - The webhook must include values for any mandatory paramaters of the runbook
        and include values for optional parameters
        - To receive data from the client, the runbook can accept a single parameter
        called $WebhookData of type [object] that contains data that the client includes
        in the POST request
        - To use a webhook after it has been created, your client application must issue
        an HTTP POST with the URL for the webhook whose syntax is
        # http://< Webhook Server >/token?=< Token Value > 
        - The client recieved one of the following return codes from the POST request:
            - 202
            - 400
            - 404
            - 500
        - If successful, the webhook contains the job ID in JSON format as follows:
        # {"JobIds":["< JobId >"]}
        - You cannot determine when the runbook job completes or determine its completion
        status from the webhook 
        - You can only choose this information using the job ID with another method such
        as Powershell or the Azure Automation API

    - Explore Source Control Ingestion:
        - It allows you to collaborate with your team more efficiently, track changes,
        and roll back to earlier versions of your runbooks
        - It makes it easier to promote code you have tested in your development 
        environment to your production automation account
        - Azure Automation supports three types of source control:
            - Github
            - Azure Devops (Git)
            - Azure Devops (TFVC)
        - Source Control allows you to push code from Azure Automation to source control
        or pull your runbooks from source control to Azure Automation
    
    - Explore Powershell Workflows:
        - Helps automate distribution, orchestration, and completion of multi-device 
        tasks, freeing users and administrators to focus on higher-level tasks
        - An activity is a specific task that you want a workflow to do
        - Just as a script is composed of one or more commands, a workflow is composed
        of activities carried out in sequence
        - Workflows survive both planned and unplanned interruptions, such as computer
        restarts
        - You can author checkpoints as part of your workflow so that you can resume
        the workflow from the last persisted task (or checkpoint) instead of restarting 
        the workflow from the beginning
        - You can schedule a task to start when specific conditions are met, as with 
        any other Windows Powershell cmdlet or script
        - Use a script editor such as the Windows Powershell Integrated Scripting 
        Environment (ISE) to write the workflow which enforces workflow syntax and
        highlights syntax errors
        - Benefits of ISE is that it automatically compiles your code and allows you
        to save the artifact
        - It is a tool that knows both workflows and script since syntactic differences
        between workflows and scripts are significantly different
        - A workflow is a windows command type, so select a name with a verb-noun format
        """
            workflow Test-Workflow
            {
                ...
            }
        """  
        - To add parameters to a workflow, use the param keyword and then add your 
        standard powershell command
        """
            workflow MyFirstRunbook-Workflow
            {
                Param(
                    [string]$VMName
                    [string]$ResourceGroupName
                )
                Start-AzureRmVM -Name $VMName -ResourceGroupName $ResourceGroupName
            }
        """
    -  Explore Hybrid Management:
        - The Hybrid Runbook Worker feature of Azure Automation allows you to run 
        Runbooks that manage local resources in your private data center on machines
        located in your data center
        - Azure Automation stores and manages the runbooks and then delivers them to
        one or more on-prem machines
        - You can select one or more computers in your data center to act as a Hybrid 
        Runbook and then run runbooks from Azure Automation
        - Each Hybrid runbook worker is a member of a Hybrid Runbook worker group, which
        you specify when you install the agent
        - A group can include a single agent, but you can install multiple agents in 
        a group for high availability
        - The agent on the local computer starts all communication with Azure automation
        in the cloud
    
    - Examine Checkpoint and parallel processing:
        - Two features available with workflows are checkpoints and parallel processing
        - Checkpoint is a snapshot of the current state of the workflow and it includes
        the current value for variables and any output generated up to that point
        - You can set a checkpoint in a workflow with the Checkpoint-Workflow activity
        """
            <Activity1>
                Checkpoint-Workflow
                <Activity2>
                    <Exception>
                <Activity3>
        """
        - Parallel Processing:
            - A script block has multiple commands that run concurrently (or in parallel)
            instead of sequentially, as for a typical script
            - In the following example: two vm0 and vm1 VMs will be started concurrently
            and VM2 will only start after vm0 and vm1 have started
            """
                Parallel
                {
                    Start-AzureRmVM -Name $vm0 -ResourceGroupName $rg
                    Start-AzureRmVM -Name $vm1 -ResourceGroupName $rg
                }
                Start-AzureRmVM -Name $vm2 -ResourceGroupName $rg
            """
            - You can use the ForEach - Parallel construct to concurrently process 
            commands for each item in a collection. The items in the collection are
            processed in parallel while the commands in the script block run sequentially
            - ThrottleLimit parameter to limit parallelism where too high of a 
            throttleLimit can cause problems
            """
                Workflow Copy-Files
                {
                    $files = @("C:\LocalPath\File1.txt","C:\LocalPath\File2.txt")
                    ForEach -Parallel -ThrottleLimit 10 ($File in $Files)
                    {
                        Copy-Item -Path $File -Destination \\NetworkPath
                        Write-Output "$File Copied"
                    }
                    Write-Output "All files Copies"
                }

            """

Implement Desired State Configuration:
    - Configuration Drift:
        - Process of a set of resources changing over time from their original
        deployment state
        - It can be because of changes made manually by people or automatically
        by processes or programs
        - A snowflake is a unique configuration that cannot be reproduced 
        automatically and is typically a result of configuration Drift
        - The greater the degree of configuration drift, the longer it takes
        to troubleshoot and rectify issues
        - Compliance drift also introduces security vulnerabilities:
            - Ports might be opened that should be kept closed
            - Updates and security patches might not be applied across 
            environments consistently
            - Software might be installed that doesn't meet compliance requirements
        - Manage Configuration Drift through:
            - Windows Powershell Desired State Configuration
                - Management Platform in powershell that provides desired state
                - Lets you manage, deploy, and enforce configurations for 
                physical or virtual machines including windows and linux
            - Azure Policy
    
    - Desired State Configuration:
        - It is a configuration management approach that you can use for configuration,
        deployment and management systems to ensure that an environment is maintained 
        in a state that you specify (defined state) and does not deviate from the state
        - DSC Components:
            - Configuration:
                - Declarative powershell scripts that define and configure instances
                of resources
                - DSC configurations are idempotent
            - Resources:
                - Contains the code that puts and keeps the target of a configuration
                in a specified state
                - The exists in powershell modules
            - Local Configuration Manager:
                - It runs on the nodes or machines you wish to configure
                - Ensures that machines are configured in whatever state the 
                configuration declares
        - Methods of implementing DSC:
            - Push Mode:
                - A user actively applies a configuration to a target node and pushes
                out the configuration
            - Pull Mode:
                - Clients are automatically configured to get their desired state
                configurations from a remote pull service
                - The pull service is provided by a pull server that acts as a central
                control and manager for the configurations
                - It ensures that the nodes confirm to the desired state and reports on
                their compliance status 
    - Azure Automation State Configuration (DSC):
        - It is an Azure cloud-based implementation of Powershell DSC, available as
        part of Azure Automation
        - It allows you to write, manage, and compile Powershell DSC configurations,
        import DSC resources and assign configurations to target nodes, all in the cloud
        - Benefits of Azure DSC:
            - Built in Pull Server
            - Management of all your DSC artifacts:
                - Manage all your DSC configurations, resources, and target nodes from
                the Azure Portal or powershell
            - Import Reporting Data into Log Analytics

    - DSC Configuration File:
        - They are windows powershell scripts that define a special type of function
        - Configuration Elements:
            - Configuration Block:
                - Outer most script block
            - Node Block:
                - There can be one or more Node blocks
                - It defines the nodes that you are configuring
            - Resource Block:
                - There can be one or more resource Block
                - This is where the configuration sets the properties for the resources


